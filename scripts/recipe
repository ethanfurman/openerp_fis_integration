#!/usr/bin/env python
from __future__ import print_function

from pprint import pprint as pp
from scription import *
from openerplib import AttrDict
from recipe import get_ingredient_data


@Command(
        item=('item to look up', ),
        )
def recipe(item):
    print('looking up', item)
    pp(get_ingredient_data("", item, 1)[0], depth=3, width=110)


@Command(
        item=('item to look up', ),
        )
def make(item):
    print('calculating', item)
    inventory_used = AttrDict()
    recipe = get_ingredient_data(oid="", item=item, food_only=True, inventory=inventory_used)
    qtys = []
    print('items needed for %s:' % recipe.desc)
    for ingredient in recipe.ingredients.values():
        print('   %s %s %s' % (ingredient.qty, ingredient.item, ingredient.desc))
        ingr_levels = inventory_used[ingredient.item]
        buildable = ingr_levels.on_hand - ingr_levels.committed
        if buildable < 0:
            buildable = 0
        if ingredient.qty:
            qtys.append(buildable/ingredient.qty)
        else:
            qtys.append(0)
        if not buildable:
            print('      out of %s: %s' % (ingredient.item, ingredient.desc), verbose=0)
    if not qtys:
        raise SystemExit('%s (%s) is not a buildable item' % (recipe.item, recipe.desc))
    buildable = min(qtys)
    if buildable:
        print('we could produce %d %s of %s' % (buildable*recipe.yield_qty, recipe.unit_size, recipe.desc), verbose=0)


Main()
