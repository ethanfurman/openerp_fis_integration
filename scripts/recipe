#!/usr/bin/env python
from __future__ import print_function

from scription import *
from openerplib import AttrDict
from recipe import get_item_ingredients, get_ingredient_data, get_items_with_recipes, F322


@Command(
        item=('item to look up', OPTION),
        order=('order to look up', OPTION),
        null=('show zeroed ingredients', FLAG),
        )
def recipe(item, order, null):
    'display recipe for one item (using: 322 (IFDT) Formula Detail file)'
    print('\nitem -> %r\norder -> %r\n' % (item, order))
    if not (item or order):
        help('one of ITEM or ORDER must be specified')
    if item:
        print('looking up', item)
        data = get_ingredient_data("", item, qty=1, level=1)
    elif order:
        data = get_ingredient_data('', order, qty=1, level=1, use_production=True)
    else:
        abort('neither ITEM nor ORDER specified')
    if not null:
        for ingred_name, ingred_data in list(data.ingredients.items()):
            if not ingred_data.qty:
                del data.ingredients[ingred_name]
    if script_verbosity:
        # info dump
        echo(data)
    else:
        echo('----------\n[%s] %s --> %s %s' % (data.item, data.desc, data.yield_qty, data.um))
        for k, v in sorted(data.items()):
            if k != 'ingredients':
                print('%-10s: %s' % (k, v), verbose=2)
        echo('----------')
        for _, i in sorted(data.ingredients.items()):
            echo('[%s] %s (%s %s)' % (i.item, i.desc, i.qty, i.um))


@Command(
        item=('item to look up', ),
        rev=('formula revision', ),
        )
def ingredients(item, rev='000'):
    ingreds = get_item_ingredients(item, rev, food_only=True)
    if not ingreds:
        abort('no ingredients found for %s-%s', (item, rev))
    for item_id, key, ingredient, _ in ingreds:
        echo('%-10s  %-10s' % (ingredient[F322.qty_batch_1], ingredient[F322.units_batch_1]))


@Command(
        item=('item to look up', ),
        )
def complete_recipe(item):
    'display recursive recipe for one item'
    print('looking up', item)
    echo(get_ingredient_data("", item, 1))


@Command(
        item=('item to look up', ),
        )
def make(item, _rev='000', _show_missing_ingredients=True):
    'check one item for producibility'
    print('calculating', item)
    inventory_used = AttrDict()
    recipe = get_ingredient_data(oid="", item=item, food_only=True, inventory=inventory_used)
    qtys = []
    print('items needed for %s:' % recipe.desc)
    for ingredient in recipe.ingredients.values():
        print('   %5.2f %s %s' % (ingredient.qty, ingredient.item, ingredient.desc))
        ingr_levels = inventory_used[ingredient.item]
        available = ingr_levels.on_hand - ingr_levels.committed
        if available < 0:
            available = 0
        if ingredient.qty:
            qtys.append(available/ingredient.qty)
        if not available and _show_missing_ingredients:
            echo('         out of %s: %s' % (ingredient.item, ingredient.desc))
    if not qtys:
        if _show_missing_ingredients:
            raise SystemExit('%s (%s) is not a buildable item' % (recipe.item, recipe.desc))
        return
    buildable = min(qtys)
    if buildable:
        echo('we could produce %d %s of %s:%s' % (buildable*recipe.yield_qty, recipe.unit_size, recipe.item, recipe.desc))

@Command()
def makeable():
    'check for any producible item given current inventory'
    items = get_items_with_recipes()
    if not items:
        raise SystemExit('no items found with recipes')
    echo('checking %d recipes...' % len(items))
    for item in items:
        make(*item, _show_missing_ingredients=False)

@Command()
def absent():
    'check for non-existent recipes'
    get_items_with_recipes(print_missing=True)


Main()
