#!/usr/bin/env python
from __future__ import print_function

from scription import *
from openerplib import AttrDict
from updates.fis_schema import F322, F328, F329
from updates.recipe import ignored_ingredients, get_ingredient_data, get_items_with_recipes
from VSS.BBxXlate.fisData import fisData

# API
@Command(
        number=('order or item #', ),
        order=('number is an order', FLAG),
        item=('number is an item (or display both order and item recipes)', FLAG),
        null=('show zeroed ingredients', FLAG),
        )
def recipe(number, order, item, null):
    'display recipe for one item (using: 322 IFDT ) or for one order (using: 329 IFPP1)'
    print('\nnumber -> %r\nitem -> %r\norder -> %r\n' % (number, item, order))
    if not (item or order):
        help('at least one of ITEM and ORDER must be specified')
    order_ingredients = {}
    item_ingredients = {}
    if order:
        print('lookup up order # %r' % (number, ))
        order_no = number
        order = get_order(order_no)
        order_ingredients = get_order_ingredients(order_no)
        if item:
            number = order[F328.prod_no]
    if item:
        print('looking up item # %r' % (number, ))
        item_no = number
        item = get_item(item_no)
        item_ingredients = get_item_ingredients(item_no)
    all_items = list(set(order_ingredients.keys() + item_ingredients.keys()))
    print(all_items[0])
    #
    def sort_by_line(item_no):
        item = order_ingredients.get(item_no)
        if item is None:
            return '999'
        else:
            return item[F329.formula_line_no]
    #
    all_items.sort(key=sort_by_line)
    header = ['Item']
    if order_no:
        header.extend(['Desc', 'Order %s' % order_no])
    if item_no:
        header.extend(['Item %s' % item_no, 'Desc'])
    table = [header, None]
    for item_key in all_items:
        line = [item_key]
        if order_ingredients:
            ingredient = order_ingredients.get(item_key)
            if ingredient is None:
                line.extend(['', ''])
            else:
                text = "%s %s" % (ingredient[F329.qty_batch_1], ingredient[F329.units_batch_1])
                line.extend(['%s - %s' % (ingredient[F329.formula_line_no], ingredient[F329.desc]), text])
        if item_ingredients:
            ingredient = item_ingredients.get(item_key)
            if ingredient is None:
                line.extend(['', ''])
            else:
                text = "%s %s" % (ingredient[F322.qty_batch_1], ingredient[F322.units_batch_1])
                line.extend([text, ingredient[F322.desc_batch_1]])
        table.append(line)
    for line in table:
        print(line)
    meta = []
    meta.append('Production Quantity: %r' % (order[F328.prod_qty], ))
    meta.append('Number of Batches: A - %r   B - %r' % (order[F328.no_of_batches_a], order[F328.no_of_batches_b]))
    meta.append('Batch Size: %r' % (order[F328.batch_size_a], ))
    echo('\n'.join(meta), border='box')
    echo(table, border='table')


@Command(
        where=Spec('filter criteria', OPTION, choices=['a','b','a&b','>1']),
        )
def all_orders(where):
    "show all orders based on batch size"
    global IFPP0
    IFPP0 = fisData('IFPP0', keymatch="10%s000010000")      # 328
    for order in IFPP0:
        a = order[F328.no_of_batches_a]
        b = order[F328.no_of_batches_b]
        print('a=%r  b=%r' % (a, b))
        if (
                where == 'a' and a
             or where == 'b' and b
             or where == 'a&b' and a and b
             or where == '>1' and (a > 1 or b > 1)
             ):
            recipe(order[F328.order_no], order=True, item=True, null=False)
            response = input('<Enter> for next record, <q> to quit')
            if response[:1].lower() == 'q':
                exit()


@Command(
        item=('item to look up', ),
        rev=('formula revision', ),
        )
def ingredients(item, rev='000'):
    "show ingrediens for an item (based on item's formula)"
    ingreds = get_item_ingredients(item, rev, food_only=True)
    if not ingreds:
        abort('no ingredients found for %s-%s', (item, rev))
    for item_id, key, ingredient, _ in ingreds:
        echo('%-10s  %-10s' % (ingredient[F322.qty_batch_1], ingredient[F322.units_batch_1]))


@Command(
        item=('item to look up', ),
        )
def complete_recipe(item):
    'display recursive recipe for one item'
    print('looking up', item)
    echo(get_ingredient_data("", item, 1))


@Command(
        item=('item to look up', ),
        )
def make(item, _rev='000', _show_missing_ingredients=True):
    'check one item for producibility'
    print('calculating', item)
    inventory_used = AttrDict()
    recipe = get_ingredient_data(oid="", item=item, food_only=True, inventory=inventory_used)
    qtys = []
    print('items needed for %s:' % recipe.desc)
    for ingredient in recipe.ingredients.values():
        print('   %5.2f %s %s' % (ingredient.qty, ingredient.item, ingredient.desc))
        ingr_levels = inventory_used[ingredient.item]
        available = ingr_levels.on_hand - ingr_levels.committed
        if available < 0:
            available = 0
        if ingredient.qty:
            qtys.append(available/ingredient.qty)
        if not available and _show_missing_ingredients:
            echo('         out of %s: %s' % (ingredient.item, ingredient.desc))
    if not qtys:
        if _show_missing_ingredients:
            raise SystemExit('%s (%s) is not a buildable item' % (recipe.item, recipe.desc))
        return
    buildable = min(qtys)
    if buildable:
        echo('we could produce %d %s of %s:%s' % (buildable*recipe.yield_qty, recipe.unit_size, recipe.item, recipe.desc))

@Command()
def makeable():
    'check for any producible item given current inventory'
    items = get_items_with_recipes()
    if not items:
        raise SystemExit('no items found with recipes')
    echo('checking %d recipes...' % len(items))
    for item in items:
        make(*item, _show_missing_ingredients=False)

@Command()
def absent():
    'check for non-existent recipes'
    get_items_with_recipes(print_missing=True)

# helpers

def get_item(number):
    global NVTY
    NVTY = fisData('NVTY1', keymatch="%s101000    101**")   # 135
    return NVTY[number]

def get_item_ingredients(number):
    print('getting ingredients for item', number)
    global IFDT
    IFDT = fisData('IFDT', subset="10%s      000")               # 322
    ingredients = dict([
            (rec[F322.ingr_code_batch_1], rec)
            for key, rec in
                IFDT.get_subset(number)
                if
                    rec[F322.ingr_code_batch_1]
                and rec[F322.ingr_code_batch_1] not in ignored_ingredients
                ])
    print(ingredients.keys())
    return ingredients


def get_order(number):
    global IFPP0
    IFPP0 = fisData('IFPP0', keymatch="10%s000010000")      # 328
    try:
        return IFPP0[number]
    except KeyError:
        abort('Order %r not found' % (number, ))

def get_order_ingredients(number):
    print('getting ingredients for order', number)
    global IFPP1
    IFPP1 = fisData('IFPP1', subset="10%s")      # 329
    ingredients = dict([
            (rec[F329.ingr_code_batch_1], rec)
            for key, rec in
                IFPP1.get_subset(number)
                if
                    rec[F329.ingr_code_batch_1]
                and rec[F329.ingr_code_batch_1] not in ignored_ingredients
                ])
    print(ingredients.keys())
    return ingredients



Main()
