#!/usr/local/sbin/suid-python  --virtualenv
from __future__ import print_function

from antipathy import Path
from openerplib import get_connection, get_records
from scription import *

import os
import re

virtualenv = os.environ['VIRTUAL_ENV']
HEB = re.compile("(HE\d\d\d|HEBCE|HECUL|HEBSA)")

@Command()
def heb():
    """
    creates matching logins for HEB partners
    """
    config = OrmFile('%s/config/fnx.ini' % virtualenv, types={'_path': Path})
    oe = config.openerp
    oe = get_connection(hostname=oe.host, database=oe.db, login=oe.user, password=oe.pw)
    res_users = oe.get_model('res.users')
    res_partner = oe.get_model('res.partner')
    ir_model_data = oe.get_model('ir.model.data')
    portal_group_id = ir_model_data.get_object_reference('portal','group_portal')[1]
    added = skipped = 0
    try:
        for partner in get_records(
                res_partner,
                domain=[('xml_id','like','HE'),('active','=',True)],
                fields=['id','xml_id','name','customer','image','is_company'],
                context={'active_test': False},
            ):
            if not HEB.match(partner.xml_id):
                continue
            # calculate login/password
            code = partner.name.split()[1]
            login = 'HE' + code
            password = '150' + code
            # check login doesn't exist
            user = get_records(
                    res_users,
                    domain=[('login','=',login)],
                    fields=['id','groups_id'],
                    context={'active_test': False},
                    )
            if user:
                # already exists, update group assignment
                [user] = user
                res_users.write(user.id, {'groups_id': [(6, 0, [portal_group_id])]})
                user = get_records(
                    res_users,
                    domain=[('login','=',login)],
                    fields=['id','groups_id'],
                    context={'active_test': False},
                    )[0]
                skipped += 1
                continue
            # create login (separate from the partner account)
            res_users.create({
                'name': partner.name,
                'login': login,
                'password': password,
                'fis_product_cross_ref_code': 'HE477',
                'groups_id': [(6, 0, [portal_group_id])],
                })
            added += 1
    finally:
        echo('skipped:', skipped)
        echo('added:  ', added)


@Command()
def add_products():
    "add missing products to fis_integration.customer_product_cross_reference"
    config = OrmFile('%s/config/fnx.ini' % virtualenv, types={'_path': Path})
    oe = config.openerp
    oe = get_connection(hostname=oe.host, database=oe.db, login=oe.user, password=oe.pw)
    cprf = oe.get_model('fis_integration.customer_product_cross_reference')
    cross_ref = dict([
        (r.key, r)
        for r in get_records(cprf)
        ])
    added = skipped = 0
    try:
        for product in get_records(
                oe,
                'product.product',
                fields=['xml_id', 'name'],
                domain=(['sale_ok','=',True],['xml_id','!=',False]),
                ):
            key = 'dflt-%s' % product.xml_id
            cr = cross_ref.get(key)
            if cr is not None:
                skipped += 1
            else:
                # only handle adding missing products
                cr = dict(
                        key=key,
                        fis_code=product.xml_id,
                        customer_product_code=product.xml_id,
                        list_code='dflt',
                        partner_id=False,
                        fis_product_id=product.id
                        )
                cprf.create(cr)
                added += 1
    finally:
        echo('skipped:', skipped)
        echo('added:  ', added)


Main()
