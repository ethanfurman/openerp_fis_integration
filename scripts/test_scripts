#!/usr/local/bin/suid-python --virtualenv
import os
import unittest
import imp
import tempfile
from antipathy import Path
from datetime import date, time, datetime, timedelta
from dbf import DateTime
from scription import Exit
from textwrap import dedent

with open('process_openerp_orders', 'rb') as fh:
    process_orders = imp.load_source('process_openerp_orders', 'process_openerp_orders', fh)
    process_orders.script_fullname = 'process_openerp_orders'

assert process_orders.BASE_SEQ == 10000
assert process_orders.CUT_OFF == timedelta(seconds=600)
assert process_orders.EOE_PATH == Path("/mnt/11-111/home/eoe/")
assert process_orders.BASE_PATH == "/home/openerp/sandbox/openerp/var/fis_integration/orders"
assert process_orders.ORDERS == "/home/openerp/sandbox/openerp/var/fis_integration/orders"
assert process_orders.ARCHIVE == "/home/openerp/sandbox/openerp/var/fis_integration/orders/archive"
assert process_orders.RECIPIENT_FILE == "/home/openerp/sandbox/openerp/var/fis_integration/orders/notify"
assert process_orders.ERROR_FILE == "/home/openerp/sandbox/openerp/var/fis_integration/orders/notified"

TEMPDIR = Path(tempfile.mkdtemp())
TEMPDIR.rmtree(ignore_errors=True)

class TestDynamicProcessOpenerpOrders(unittest.TestCase):

    maxDiff = None

    process_orders.EOE_PATH = Path(TEMPDIR/'eoe/')
    process_orders.BASE_PATH = Path(TEMPDIR)/'orders'
    process_orders.ORDERS = process_orders.BASE_PATH
    process_orders.ARCHIVE = process_orders.BASE_PATH/'archive'
    process_orders.RECIPIENT_FILE = process_orders.BASE_PATH/'notify'
    process_orders.ERROR_FILE = process_orders.BASE_PATH/'notified'

    def setUp(self):
        TEMPDIR.rmtree(ignore_errors=True)
        TEMPDIR.mkdir()
        process_orders.ORDERS.mkdir()
        process_orders.ARCHIVE.mkdir()
        process_orders.EOE_PATH.mkdir()
        with open(process_orders.ERROR_FILE, 'w') as fh:
            pass
        with open(process_orders.RECIPIENT_FILE, 'w') as fh:
            fh.write(dedent("""\
                    email                 phone@carrier             availability
                    ethan@stoneleaf.us    9715061961@vtext.com      Mo-Tu:800-1700   We,Fr:1300-1700   Th:1700-2100   Sa:0000-0300,1200-1500 Su:-
                    emile@gmail.com       6503433458@txt.att.net
                    tony@togo.net
                    """))
        for file in (
                'blah', '23banjo', '12345', '2345', '8273', '1274', '2819', '91827', '18891',
            ):
            process_orders.ORDERS.touch('%s.txt' % file)
        for file in (
                'blah', '23banjo', '12345', '2345',
            ):
            process_orders.ORDERS.touch(file)
        for file in (
                '776', '777', '778', '779', '780',
            ):
            process_orders.ARCHIVE.touch('%s.txt' % file)

    def test_process_openerp_orders(self):
        with open(process_orders.ORDERS/'1234.txt', 'w') as fh:
            fh.write(dedent("""\
                    HE649-150649
                    802180 - 1
                    223921 - 2 - 25 lb
                    """))
        with open(process_orders.ORDERS/'3456.txt', 'w') as fh:
            fh.write(dedent("""\
                    HE018-150018
                    072010 - 8
                    683931 - 9 - 25 lb
                    """))
        with open(process_orders.ORDERS/'4567.txt', 'w') as fh:
            fh.write(dedent("""\
                    HE018-150018
                    072010, 8
                    683931 - 9 - 25 lb
                    """))
        with open(process_orders.ORDERS/'5678.txt', 'w') as fh:
            fh.write(dedent("""\
                    WHOLE-BULK-715234
                    RSD-041920
                    007010 - 4 - 15 oz
                    573911 - 1
                    """))
        with open(process_orders.ORDERS/'7890.txt', 'w') as fh:
            fh.write(dedent("""\
                    LUCKY-407B-900002
                    PON-819287
                    002085 - 1
                    283001 - 7
                    """))
        with open(process_orders.ORDERS/'12345.txt', 'w') as fh:
            fh.write(dedent("""\
                    ALBER-GROC-112843
                    PON-10005196
                    RSD-052020
                    032180 - 3 - 10 lb
                    286911 - 2 - 25 lb
                    """))
        with open(process_orders.ORDERS/'18891.txt', 'w') as fh:
            fh.write(dedent("""\
                    ALBER-DELI-112877
                    PON-10005196
                    RSD-052020
                    032180 - 3 - 10 lb
                    286911 - 2 - 25 lb
                    """))
        with open(process_orders.ORDERS/'91827.txt', 'w') as fh:
            fh.write(dedent("""\
                    ALBER-BULK-115141
                    PON-10005196
                    RSD-052020
                    032180 - 3 - 10 lb
                    286911 - 2 - 25 lb
                    """))
        # for file in (
        #         '2345', '3456', '5678', '7890', '12345',
        #     ):
        #     process_orders.ORDERS.touch('%s.txt' % file, (None, datetime(2020, 5, 20, 9, 51).timestamp()))
        #
        old_send = None
        old_echo = None
        old_error = None
        old_update = None
        old_notify = None
        try:
            old_send = process_orders.send_mail
            old_echo = process_orders.echo
            old_error = process_orders.error
            old_update = process_orders.update_recipients
            old_notify = process_orders.notify
            process_orders.error = MockFunction("error")
            process_orders.echo = MockFunction("echo")
            process_orders.notify = MockFunction('notify')
            process_orders.TOMORROW = '091518'
            process_orders.process_openerp_orders()
            error_args = process_orders.error.called_args
            self.assertEqual(len(error_args), 5)
            self.assertTrue(error_args[0][0].startswith('[1274.txt]  ValueError:'))
            self.assertTrue(error_args[1][0].startswith('[2345.txt]  ValueError:'))
            self.assertTrue((process_orders.ORDERS/'1274.txt').exists())
            self.assertTrue((process_orders.ORDERS/'2345.txt').exists())
            # 2345.txt
            with open(process_orders.EOE_PATH/'11234.ext') as fh:
                self.assertEqual(
                        dedent("""\
                            C150649+P0000000037+D091518+I802180+Q1+I223921+Q2+
                            """.strip()),
                        fh.read(),
                        )
            # 3456.txt
            with open(process_orders.EOE_PATH/'13456.ext') as fh:
                self.assertEqual(
                        dedent("""\
                            C150018+P0000000037+D091518+I072010+Q8+I683931+Q9+
                            """.strip()),
                        fh.read(),
                        )
            # 5678.txt
            with open(process_orders.EOE_PATH/'15678.ext') as fh:
                self.assertEqual(
                        dedent("""\
                            C715234+P0000000037+D041920+I007010+Q4+I573911+Q1+
                            """.strip()),
                        fh.read(),
                        )
            # 7890.txt
            with open(process_orders.EOE_PATH/'17890.ext') as fh:
                self.assertEqual(
                    dedent("""\
                            C900002+P819287+D091518+I002085+Q1+I283001+Q7+
                            """.strip()),
                    fh.read(),
                    )
            # 12345.txt
            with open(process_orders.EOE_PATH/'12345.ext') as fh:
                self.assertEqual(
                    dedent("""\
                            C112843+P10005196+D052020+I032180+Q3+I286911+Q2+
                            """.strip()),
                    fh.read(),
                    )

        finally:
            if old_send is not None:
                process_orders.send_mail = old_send
            if old_echo is not None:
                process_orders.echo = old_echo
            if old_error is not None:
                process_orders.error = old_error
            if old_update is not None:
                process_orders.update_recipients = old_update
            if old_notify is not None:
                process_orders.notify = old_notify

    def test_daily_digest(self):
        with open(process_orders.ARCHIVE/'776.txt', 'w') as fh:
            fh.write(dedent("""\
                    HE649-150649
                    802180 - 1
                    223921 - 2 - 25 lb
                    """))
        with open(process_orders.ARCHIVE/'777.txt', 'w') as fh:
            fh.write(dedent("""\
                    HE018-150018
                    072010 - 8
                    683931 - 9 - 25 lb
                    """))
        with open(process_orders.ARCHIVE/'778.txt', 'w') as fh:
            fh.write(dedent("""\
                    WHOLE-BULK-715234
                    RSD-041920
                    007010 - 4 - 15 oz
                    573911 - 1
                    """))
        with open(process_orders.ARCHIVE/'779.txt', 'w') as fh:
            fh.write(dedent("""\
                    LUCKY-407B-900002
                    PON-819287
                    002085 - 1
                    283001 - 7
                    """))
        with open(process_orders.ARCHIVE/'780.txt', 'w') as fh:
            fh.write(dedent("""\
                    ALBER-GROC-112843
                    PON-10005196
                    RSD-052020
                    032180 - 3 - 10 lb
                    286911 - 2 - 25 lb
                    """))
        with open(process_orders.ARCHIVE/'781.txt', 'w') as fh:
            fh.write(dedent("""\
                    ALBER-GROC-112843
                    PON-10005196
                    RSD-052020
                    032180 - 3 - 10 lb
                    286911 - 2 - 25 lb
                    072010 - 8
                    683931 - 9 - 25 lb
                    802180 - 1
                    223921 - 2 - 25 lb
                    """))
        with open(process_orders.ARCHIVE/'782.txt', 'w') as fh:
            fh.write(dedent("""\
                    ALBER-GROC-112843
                    PON-10005196
                    RSD-052020
                    032180 - 3 - 10 lb
                    286911 - 2 - 25 lb
                    """))
        for file in (
                '776', '777', '778', '779', '780', '781', '782',
            ):
            process_orders.ARCHIVE.touch('%s.txt' % file, (None, process_orders.time_stamp(datetime(2020, 5, 20, 9, 51))))
        #
        old_send = None
        old_echo = None
        old_error = None
        old_update = None
        try:
            old_send = process_orders.send_mail
            old_echo = process_orders.echo
            old_error = process_orders.error
            old_update = process_orders.update_recipients
            process_orders.error = MockFunction("error")
            process_orders.echo = MockFunction("echo")
            process_orders.send_mail = MockFunction("send_mail")
            process_orders.daily_digest(date(2020, 5, 20), ())
            self.assertEqual(
                    process_orders.echo.called_args[-1],
                    (dedent("""\
                            FILES NOT PROCESSED
                               1274.txt         12345.txt
                               2345.txt         18891.txt
                               2819.txt         91827.txt
                               8273.txt
                            ===================


                            found 7 records for 2020-05-20
                            
                               776.txt          780.txt
                               777.txt          781.txt
                               778.txt          782.txt
                               779.txt
                            
                            === 776.txt ===
                               HE649-150649
                               802180 - 1
                               223921 - 2 - 25 lb
                            
                            === 777.txt ===
                               HE018-150018
                               072010 - 8
                               683931 - 9 - 25 lb
                            
                            === 778.txt ===
                               WHOLE-BULK-715234
                               RSD-041920
                               007010 - 4 - 15 oz
                               573911 - 1
                            
                            === 779.txt ===
                               LUCKY-407B-900002
                               PON-819287
                               002085 - 1
                               283001 - 7
                            
                            === 780.txt ===
                               ALBER-GROC-112843
                               PON-10005196
                               RSD-052020
                               032180 - 3 - 10 lb
                               286911 - 2 - 25 lb

                            === 781.txt ===
                               ALBER-GROC-112843         072010 - 8
                               PON-10005196              683931 - 9 - 25 lb
                               RSD-052020                802180 - 1
                               032180 - 3 - 10 lb        223921 - 2 - 25 lb
                               286911 - 2 - 25 lb

                            === 782.txt ===
                               ALBER-GROC-112843
                               PON-10005196
                               RSD-052020
                               032180 - 3 - 10 lb
                               286911 - 2 - 25 lb
                            """),
                        ))
            process_orders.daily_digest(date(2020, 5, 20), ('ethan@stoneleaf.us','tony@togo.net'))
            self.assertEqual(
                    process_orders.send_mail.called_args[-1],
                    (
                        ('ethan@stoneleaf.us','tony@togo.net'),
                        "portal orders",
                        dedent("""\
                            FILES NOT PROCESSED
                               1274.txt         12345.txt
                               2345.txt         18891.txt
                               2819.txt         91827.txt
                               8273.txt
                            ===================


                            found 7 records for 2020-05-20
                            
                               776.txt          780.txt
                               777.txt          781.txt
                               778.txt          782.txt
                               779.txt
                            
                            === 776.txt ===
                               HE649-150649
                               802180 - 1
                               223921 - 2 - 25 lb
                            
                            === 777.txt ===
                               HE018-150018
                               072010 - 8
                               683931 - 9 - 25 lb
                            
                            === 778.txt ===
                               WHOLE-BULK-715234
                               RSD-041920
                               007010 - 4 - 15 oz
                               573911 - 1
                            
                            === 779.txt ===
                               LUCKY-407B-900002
                               PON-819287
                               002085 - 1
                               283001 - 7
                            
                            === 780.txt ===
                               ALBER-GROC-112843
                               PON-10005196
                               RSD-052020
                               032180 - 3 - 10 lb
                               286911 - 2 - 25 lb

                            === 781.txt ===
                               ALBER-GROC-112843         072010 - 8
                               PON-10005196              683931 - 9 - 25 lb
                               RSD-052020                802180 - 1
                               032180 - 3 - 10 lb        223921 - 2 - 25 lb
                               286911 - 2 - 25 lb

                            === 782.txt ===
                               ALBER-GROC-112843
                               PON-10005196
                               RSD-052020
                               032180 - 3 - 10 lb
                               286911 - 2 - 25 lb
                            """),
                        ))
        finally:
            if old_send is not None:
                process_orders.send_mail = old_send
            if old_echo is not None:
                process_orders.echo = old_echo
            if old_error is not None:
                process_orders.error = old_error
            if old_update is not None:
                process_orders.update_recipients = old_update


    def test_get_files_to_process(self):
        """
        returns files that match \d*.txt
        """
        self.assertEqual(
                process_orders.get_files_to_process(process_orders.ORDERS),
                [
                    process_orders.ORDERS/'1274.txt',
                    process_orders.ORDERS/'2345.txt',
                    process_orders.ORDERS/'2819.txt',
                    process_orders.ORDERS/'8273.txt',
                    process_orders.ORDERS/'12345.txt',
                    process_orders.ORDERS/'18891.txt',
                    process_orders.ORDERS/'91827.txt',
                    ])
        self.assertEqual(
                process_orders.get_files_to_process(process_orders.ARCHIVE),
                [
                    process_orders.ARCHIVE/'776.txt',
                    process_orders.ARCHIVE/'777.txt',
                    process_orders.ARCHIVE/'778.txt',
                    process_orders.ARCHIVE/'779.txt',
                    process_orders.ARCHIVE/'780.txt',
                    ])

    def test_filter_recipients(self):
        """
        return recipients that have not been contacted for current situation
        """
        recipients = [
                'ethan@stoneleaf.us',
                'emile@gmail.com',
                'tony@togo.net',
                '971.506.1961@vtext.com',
                ]
        self.assertEqual(process_orders.filter_recipients(recipients), recipients)
        #
        with open(process_orders.ERROR_FILE, 'w') as fh:
            fh.write('2020-05-20 0531 ethan@stoneleaf.us\n')
            fh.write('2020-07-19 1644 tony@togo.net\n')
        self.assertEqual(
                process_orders.filter_recipients(recipients),
                ['emile@gmail.com', '971.506.1961@vtext.com'],
                )

    def test_get_recipients(self):
        """
        read address file and return eligible recipients based on allowed times
        """
        process_orders.NOW = datetime(2019, 12, 30, 2, 19)
        self.assertEqual(
                process_orders.get_recipients(process_orders.RECIPIENT_FILE),
                ['ethan@stoneleaf.us','emile@gmail.com','6503433458@txt.att.net','tony@togo.net'],
                )
        process_orders.NOW = datetime(2020, 4, 14, 6, 33)
        self.assertEqual(
                process_orders.get_recipients(process_orders.RECIPIENT_FILE),
                ['ethan@stoneleaf.us','emile@gmail.com','6503433458@txt.att.net','tony@togo.net'],
                )
        process_orders.NOW = datetime(2020, 4, 14, 8, 23)
        self.assertEqual(
                process_orders.get_recipients(process_orders.RECIPIENT_FILE),
                ['ethan@stoneleaf.us','9715061961@vtext.com','emile@gmail.com','6503433458@txt.att.net','tony@togo.net'],
                )
        process_orders.NOW = datetime(2020, 8, 19, 13, 45)
        self.assertEqual(
                process_orders.get_recipients(process_orders.RECIPIENT_FILE),
                ['ethan@stoneleaf.us','9715061961@vtext.com','emile@gmail.com','6503433458@txt.att.net','tony@togo.net'],
                )
        with open(process_orders.ERROR_FILE, 'w') as fh:
            fh.write(dedent("""\
                    2020-10-14 13:26 ethan.stoneleaf@gmail.com
                    2020-10-14 13:26 emile@sunridgefarms.com
                    """))
        self.assertEqual(
                process_orders.get_recipients(process_orders.ERROR_FILE),
                ['ethan.stoneleaf@gmail.com', 'emile@sunridgefarms.com'],
                )

    def test_notify_initial_no_error_file(self):
        process_orders.ERROR_FILE.unlink()
        process_orders.NOW = datetime(2019, 12, 30, 2, 19)
        with Patch(
                process_orders,
                'send_mail', 'error', 'update_recipients', 'get_recipients', 'filter_recipients',
                ) as p:
            p.send_mail.return_value = (
                    ['ethan@stoneleaf.us','emile@gmail.com','6503433458@txt.att.net','tony@togo.net'],
                    [],
                    )
            p.filter_recipients.return_value = ['ethan@stoneleaf.us','emile@gmail.com','6503433458@txt.att.net','tony@togo.net']
            notify_result = process_orders.notify(['error 1\n', 'error 2\n'])
            self.assertEqual(notify_result, Exit.Unknown)
            self.assertEqual(
                    p.send_mail.called_args[-1],
                    (
                        ['ethan@stoneleaf.us','emile@gmail.com','6503433458@txt.att.net','tony@togo.net'],
                        "process_openerp_orders: errors encountered",
                        "error 1\nerror 2\n",
                        ))
            self.assertEqual(
                    p.update_recipients.called_args[-1][0],
                    ['ethan@stoneleaf.us','emile@gmail.com','6503433458@txt.att.net','tony@togo.net'],
                    )
            self.assertEqual(p.error.called_args, [])

    def test_notify_initial_old_error_file(self):
        new_time = process_orders.time_stamp(datetime(2019, 12, 30, 2, 1))
        process_orders.ERROR_FILE.touch((new_time, new_time))
        process_orders.NOW = datetime(2019, 12, 30, 2, 19)
        with Patch(
                process_orders,
                'send_mail', 'error', 'update_recipients', 'get_recipients', 'filter_recipients',
                ) as p:
            p.send_mail.return_value = (
                    ['ethan@stoneleaf.us','emile@gmail.com','6503433458@txt.att.net','tony@togo.net'],
                    [],
                    )
            p.filter_recipients.return_value = ['ethan@stoneleaf.us','emile@gmail.com','6503433458@txt.att.net','tony@togo.net']
            notify_result = process_orders.notify(['error 1\n', 'error 2\n'])
            self.assertEqual(notify_result, Exit.Unknown)
            self.assertEqual(
                    p.send_mail.called_args[-1],
                    (
                        ['ethan@stoneleaf.us','emile@gmail.com','6503433458@txt.att.net','tony@togo.net'],
                        "process_openerp_orders: errors encountered",
                        "error 1\nerror 2\n",
                        ))
            self.assertEqual(
                    p.update_recipients.called_args[-1][0],
                    ['ethan@stoneleaf.us','emile@gmail.com','6503433458@txt.att.net','tony@togo.net'],
                    )
            self.assertEqual(p.error.called_args, [])

    def test_notify_timestamp_progresses(self):
        # errors are present, but no new notification addresses
        # timestamp on ERROR file should advance
        new_time = process_orders.time_stamp(datetime(2020, 7, 4, 14, 19))
        process_orders.ERROR_FILE.touch((new_time, new_time))
        process_orders.NOW = datetime(2020, 7, 4, 14, 23)
        prev_error_stat = process_orders.ERROR_FILE.stat()
        with Patch(
                process_orders,
                'send_mail', 'error', 'update_recipients', 'get_recipients', 'filter_recipients',
                ) as p:
            p.filter_recipients.return_value = ([])
            p.send_mail.return_value = ([], [])
            notify_result = process_orders.notify(['error 5\n', 'error 6\n'])
            self.assertEqual(notify_result, Exit.Unknown)
            self.assertTrue(process_orders.send_mail.called in (0, 1), 'send_mail called more than once')
            if process_orders.send_mail.called == 1:
                self.assertEqual(process_orders.send_mail.called_args[-1], (
                    [],
                    'process_openerp_orders: errors encountered',
                    'error 5\nerror 6\n',
                    ))
            new_error_stat = process_orders.ERROR_FILE.stat()
            self.assertTrue(new_error_stat.st_atime > prev_error_stat.st_atime)
            self.assertEqual(p.error.called_args, [])

    def test_notify_no_errors_but_file_remains(self):
        new_time = process_orders.time_stamp(datetime(2020, 10, 15, 10, 18))
        process_orders.ERROR_FILE.touch((new_time, new_time))
        process_orders.NOW = datetime(2020, 10, 15, 10, 26)
        old_stat = process_orders.ERROR_FILE.stat()
        last_accessed = old_stat.st_atime
        self.assertTrue((process_orders.NOW - DateTime.fromtimestamp(last_accessed)) < process_orders.CUT_OFF)
        with Patch(
                process_orders,
                'send_mail', 'error', 'update_recipients', 'get_recipients', 'filter_recipients',
                ) as p:
            notify_result = process_orders.notify([])
        new_stat = process_orders.ERROR_FILE.stat()
        self.assertEqual(notify_result, Exit.Success)
        self.assertEqual(old_stat, new_stat)
        self.assertEqual(p.send_mail.called, 0)
        self.assertEqual(p.error.called, 0)
        self.assertEqual(p.update_recipients.called, 0)
        self.assertEqual(p.get_recipients.called, 0)
        self.assertEqual(p.filter_recipients.called, 0)
        self.assertEqual(p.error.called_args, [])

    def test_notify_no_errors_file_removed(self):
        new_time = process_orders.time_stamp(datetime(2020, 1, 15, 10, 18))
        process_orders.ERROR_FILE.touch((new_time, new_time))
        process_orders.NOW = datetime(2020, 1, 15, 10, 29)
        with Patch(
                process_orders,
                'send_mail', 'error', 'update_recipients', 'get_recipients', 'filter_recipients',
                ) as p:
            p.get_recipients.return_value = ['ethan@stoneleaf.us','9715061961@vtext.com']
            p.send_mail.return_value = (['ethan@stoneleaf.us','9715061961@vtext.com'], [])
            notify_result = process_orders.notify([])
        self.assertEqual(notify_result, Exit.Success)
        self.assertFalse(process_orders.ERROR_FILE.exists())
        self.assertEqual(
                p.send_mail.called_args[-1],
                (
                    ['ethan@stoneleaf.us','9715061961@vtext.com'],
                    'process_openerp_orders: all good',
                    'problem has been resolved',
                    ))
        self.assertEqual(p.error.called_args, [])

    def test_notify_no_errors_file_removed_bad_send(self):
        new_time = process_orders.time_stamp(datetime(2020, 1, 15, 10, 18))
        process_orders.ERROR_FILE.touch((new_time, new_time))
        process_orders.NOW = datetime(2020, 1, 15, 10, 29)
        with Patch(
                process_orders,
                'send_mail', 'error', 'update_recipients', 'get_recipients', 'filter_recipients',
                ) as p:
            p.get_recipients.return_value = ['ethan@stoneleaf.us','9715061961@vtext.com']
            p.send_mail.return_value = (['ethan@stoneleaf.us'],['9715061961@vtext.com'])
            notify_result = process_orders.notify([])
        self.assertEqual(notify_result, Exit.UnknownError)
        self.assertFalse(process_orders.ERROR_FILE.exists())
        self.assertEquals(p.error.called_args[-1], ('\n\nUnable to contact:\n  9715061961@vtext.com',))

    def test_update_recipients(self):
        """
        update notification file with who was contacted at what time
        """
        with open(process_orders.ERROR_FILE) as fh:
            self.assertEqual(fh.read(), "")
        process_orders.NOW = datetime(2020, 5, 20, 6, 39)  # wednesday
        process_orders.update_recipients(['ethan@stoneleaf.us', 'tony@togo.net'])
        expected = ""
        expected += "%-20s ethan@stoneleaf.us\n" % process_orders.NOW.strftime('%Y-%m-%d %H:%M')
        expected += "%-20s tony@togo.net\n" % process_orders.NOW.strftime('%Y-%m-%d %H:%M')
        with open(process_orders.ERROR_FILE) as fh:
            self.assertEqual(fh.read(), expected)
        process_orders.NOW = datetime(2020, 5, 20, 13, 39)  # wednesday
        to_notify = process_orders.get_recipients(process_orders.RECIPIENT_FILE)
        self.assertEqual(
                to_notify,
                ['ethan@stoneleaf.us','9715061961@vtext.com','emile@gmail.com','6503433458@txt.att.net','tony@togo.net'],
                )
        needs_notify = process_orders.filter_recipients(to_notify)
        self.assertEqual(
                needs_notify,
                ['9715061961@vtext.com','emile@gmail.com','6503433458@txt.att.net'],
                )
        process_orders.update_recipients(needs_notify)
        expected += "%-20s 9715061961@vtext.com\n" % process_orders.NOW.strftime('%Y-%m-%d %H:%M')
        expected += "%-20s emile@gmail.com\n" % process_orders.NOW.strftime('%Y-%m-%d %H:%M')
        expected += "%-20s 6503433458@txt.att.net\n" % process_orders.NOW.strftime('%Y-%m-%d %H:%M')
        with open(process_orders.ERROR_FILE) as fh:
            self.assertEqual(fh.read(), expected)

    def test_weekly_availability(self):
        ethan = process_orders.WeeklyAvailability(
                'Mo-Tu:800-1700',
                'We,Fr:1300-1700',
                'Th:1700-2100',
                'Sa:0000-0300,1200-1500',
                'Su:-',
                )
        tony = process_orders.WeeklyAvailability(
            'Mo-We:0500-1200',
            'Th,Fr:1200-1700',
            'Sa-Su:0800-2100',
            )
        emile = process_orders.WeeklyAvailability.always()
        def test_periods(tests):
            for e, t, dt in tests:
                self.assertEqual(e, dt in ethan, dt.strftime("%a %H:%M %%s %%s") % (('in', 'not in')[dt in ethan], ethan,))
                self.assertEqual(t, dt in tony, dt.strftime("%a %H:%M %%s %%s") % (('in', 'not in')[dt in tony], tony))
                self.assertTrue(dt in emile, dt.strftime("%a %H:%M %%s %%s") % (('in', 'not in')[True], emile))
        # monday
        dt1 = datetime(2019, 12, 30, 2, 19)     # e t
        dt2 = datetime(2020, 3, 9, 6, 33)     # e T
        dt3 = datetime(2020, 6, 15, 8, 1)      # E T
        dt4 = datetime(2020, 8, 31, 13, 45)    # E t
        dt5 = datetime(2020, 11, 2, 17, 1)     # e t
        test_periods((
                (False, False, dt1),
                (False, True, dt2),
                (True, True, dt3),
                (True, False, dt4),
                (False, False, dt5),
                ))
        # tuesday
        dt1 = datetime(2020, 2, 11, 2, 19)     # e t
        dt2 = datetime(2020, 4, 14, 6, 33)     # e T
        dt3 = datetime(2020, 7, 7, 8, 1)      # E T
        dt4 = datetime(2020, 9, 15, 13, 45)    # E t
        dt5 = datetime(2020, 12, 29, 17, 1)     # e t
        test_periods((
                (False, False, dt1),
                (False, True, dt2),
                (True, True, dt3),
                (True, False, dt4),
                (False, False, dt5),
                ))
        # wednesday
        dt1 = datetime(2020, 1, 1, 2, 19)       # e t
        dt2 = datetime(2020, 5, 6, 6, 33)       # e T
        dt3 = datetime(2020, 6, 3, 12, 13)      # e t
        dt4 = datetime(2020, 8, 19, 13, 45)      # E t
        dt5 = datetime(2020, 10, 28, 17, 1)       # e t
        test_periods((
                (False, False, dt1),
                (False, True, dt2),
                (False, False, dt3),
                (True, False, dt4),
                (False, False, dt5),
                ))
        # thursday
        dt1 = datetime(2020, 2, 6, 2, 19)       # e t
        dt2 = datetime(2020, 5, 7, 6, 33)       # e t
        dt3 = datetime(2020, 8, 13, 12, 13)      # e T
        dt4 = datetime(2020, 10, 29, 17, 0)       # E T
        dt5 = datetime(2020, 11, 12, 19, 19)      # E t
        dt6 = datetime(2020, 12, 31, 23, 19)      # e t
        test_periods((
                (False, False, dt1),
                (False, False, dt2),
                (False, True, dt3),
                (True, True, dt4),
                (True, False, dt5),
                (False, False, dt6),
                ))
        # friday
        dt1 = datetime(2020, 3, 6, 2, 19)       # e t
        dt2 = datetime(2020, 4, 10, 6, 33)       # e t
        dt3 = datetime(2020, 7, 3, 12, 13)      # e T
        dt4 = datetime(2020, 8, 28, 17, 0)       # E T
        dt5 = datetime(2020, 9, 11, 19, 19)      # e t
        dt6 = datetime(2020, 11, 27, 23, 19)      # e t
        test_periods((
                (False, False, dt1),
                (False, False, dt2),
                (False, True, dt3),
                (True, True, dt4),
                (False, False, dt5),
                (False, False, dt6),
                ))
        # saturday
        dt1 = datetime(2020, 1, 25, 2, 19)       # E t
        dt2 = datetime(2020, 2, 8, 6, 33)       # e t
        dt3 = datetime(2020, 3, 14, 8, 33)       # e T
        dt4 = datetime(2020, 4, 18, 12, 13)      # E T
        dt5 = datetime(2020, 5, 16, 17, 0)       # e T
        dt6 = datetime(2020, 6, 27, 19, 19)      # e T
        dt7 = datetime(2020, 7, 4, 23, 19)      # e t
        test_periods((
                (True, False, dt1),
                (False, False, dt2),
                (False, True, dt3),
                (True, True, dt4),
                (False, True, dt5),
                (False, True, dt6),
                (False, False, dt7),
                ))
        dt1 = datetime(2020, 6, 7, 2, 19)       # e t
        dt2 = datetime(2020, 7, 12, 6, 33)       # e t
        dt3 = datetime(2020, 8, 16, 8, 33)       # e t
        dt4 = datetime(2020, 9, 13, 12, 13)      # e T
        dt5 = datetime(2020, 10, 11, 17, 0)       # e T
        dt6 = datetime(2020, 11, 29, 19, 19)      # e T
        dt7 = datetime(2020, 12, 27, 23, 19)      # e t
        test_periods((
                (False, False, dt1),
                (False, False, dt2),
                (False, True, dt3),
                (False, True, dt4),
                (False, True, dt5),
                (False, True, dt6),
                (False, False, dt7),
                ))


class MockFunction(object):
    #
    def __init__(self, name, return_value=None):
        self.name = name
        self.return_value = return_value
        self.called = 0
        self.called_args = []
        self.called_kwds = []
    #
    def __repr__(self):
        return "MockFunction_%s" % self.name
    #
    def __call__(self, *args, **kwds):
        self.called_args.append(args)
        self.called_kwds.append(kwds)
        self.called += 1
        return self.return_value


class Patch(object):
    #
    def __init__(self, module, *names):
        self.module = module
        self.names = names
        self.original_objs = {}
        for f in names:
            orig = getattr(module, f)
            patch = MockFunction(f)
            self.original_objs[f] = orig
            setattr(self, f, patch)
            setattr(module, f, patch)
    #
    def __enter__(self):
        return self
    #
    def __exit__(self, *exc):
        for f in self.names:
            setattr(self.module, f, self.original_objs[f])


if __name__ == '__main__':
    try:
        unittest.main()
    finally:
        TEMPDIR.rmtree(ignore_errors=True)

