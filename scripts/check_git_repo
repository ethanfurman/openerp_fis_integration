#!/usr/local/bin/suid-python
"""
checks repositories for uncommitted changes, notifying once per day per change

the git output is saved in a file in /var, and touched to a future date/time;
when that date/time has arrived and the changes have not been reverted or
committed, an email is sent as a reminder and the file is touched to the
morning of the next day
"""
from __future__ import print_function

from scription import *
from antipathy import Path
from dbf import DateTime
from fnx_script_support import send_mail, time_stamp, NOW, TOMORROW

CACHE = Path('/var')
BASE = 'git_repo_check-'

# API

@Command(
        repositories=Spec('git repositories to examine', type=Path),
        email=Spec('addresses to send report to', MULTI),
        grace_period=Spec('grace period before notifying', OPTION, ('g','grace'), force_default=90),
        )
def check_git_repo(email, grace_period, *repositories):
    for repo in repositories:
        print('checking', repo)
        if not repo.startswith('/'):
            abort('repo path must be absolute')
        if any(d in ('.','..') for d in repo):
            abort('. and .. not allowed in directory paths')
        status = Execute('git status', cwd=repo)
        print(status.stdout, verbose=2)
        print(status.stderr, verbose=2)
        if (
                status.stdout.startswith("On branch master\n")
                and status.stdout.endswith("nothing to commit, working directory clean\n")
            ):
            clear(repo, email)
            continue
        if not status.stdout.startswith("On branch master\n"):
            subject = "not on branch master"
        else:
            subject = "has uncommitted and/or untracked files"
        message = '\n'.join([status.stdout, status.stderr])
        if email:
            maybe_warn(repo, email, subject, message, grace_period)
        else:
            error('repository %s' % repo, message, sep='\n')

@Command(
        )
def status():
    for status_file in CACHE.glob(BASE+'*'):
        stat = status_file.stat()
        echo('repo file: %s\naccess:   %s\nmodified: %s'
             % (status_file, 
                DateTime.fromtimestamp(stat.st_atime).strftime('%Y-%m-%d %H:%M:%S'),
                DateTime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S'),
                ),
             border='flag',
             )
        with open(status_file) as sf:
            echo(sf.read(), border='underline')

# helpers

def status_file(repo):
    return CACHE / (BASE + repo.strip('/').replace('/','_'))

def clear(repo, addresses):
    cache_file = status_file(repo)
    if not cache_file.exists():
        return
    notify_time = DateTime.fromtimestamp(cache_file.stat().st_atime)
    cache_file.unlink()
    print(notify_time.strftime('notify access time: %Y-%m-%d %H:%M:%S'), verbose=2)
    print(NOW.strftime('NOW: %Y-%m-%d %H:%M:%S'), verbose=2)
    if notify_time <= NOW < TOMORROW:
        print('  nobody notified, returning', verbose=2)
        # nobody was notified, no need to send all clear
        return
    print('  notifying', addresses, verbose=2)
    message = "changes have been dealt with"
    send_mail(addresses, "repo %s is stable" % repo, message)
    return

def maybe_warn(repo, addresses, subject, message, grace_period):
    # if no previous error file exists
    # - create
    # - touch to (grace_period) minutes later
    # - return
    # if previous file exists, but errors are different
    # - update contents
    # - touch to (grace_period) minutes later
    # - return
    # if previous file exists and errors are the same
    # - if access time of file is now in the past
    #   - send email
    #   - touch to tomorrow at 0900
    #
    def update_file():
        with open(cache_file, 'w') as cf:
            cf.write(message)
        then = time_stamp(NOW.replace(delta_minute=grace_period))
        cache_file.touch((then, None))
        return
    #
    cache_file = status_file(repo)
    if not cache_file.exists():
        return update_file()
    cf_stat = cache_file.stat()
    with open(cache_file) as cf:
        new_error = cf.read() != message
    if new_error:
        return update_file()
    access = DateTime.fromtimestamp(cf_stat.st_atime)
    if NOW >= access:
        then = time_stamp(NOW.replace(delta_day=1, hour=0, minute=0, second=0))
        cache_file.touch((then, None))
        send_mail(addresses, "repo %s %s" % (repo, subject), message)


# do it
Run()
