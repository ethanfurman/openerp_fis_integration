#!/usr/local/sbin/suid-python --virtualenv
from __future__ import print_function

import dbf
import os
import re
from base64 import b64encode
from dbf import DateTime
from filecmp import cmp as fce
from xmlrpclib import Fault
from antipathy import Path
from openerplib import get_connection, get_records, SchroedingerFile, AttrDict
from scription import *
from urllib2 import urlopen, URLError
from VSS.address import NameCase
from VSS.utils import crc32

virtual_env = Path(os.environ['VIRTUAL_ENV'])
config = virtual_env / 'config/fnx.ini'
arch_dept = virtual_env / 'var/openerp/archive/'
arch_user = virtual_env / 'var/openerp/archive/'

# API

@Script(
        )
def main():
    global config, oe, res_users, res_groups, users, groups, res_partner, partners
    global user_map, partner_map, force_update, reset_photos, hr, ir_model_data
    config = OrmFile(config, types={'_path':Path})
    if config.users.force_update.exists():
        force_update = True
        config.users.force_update.unlink()
    else:
        force_update = False
    if config.users.reset_photos.exists():
        reset_photos = True
        config.users.reset_photos.unlink()
    else:
        reset_photos = False
    print('force update: %s\nphoto reset: %s' % (force_update, reset_photos), verbose=2)
    if script_command_name in ('create', 'photos', 'update', 'update_transmitter_logins'):
        oe = get_connection(
                hostname=config.openerp.host,
                database=config.openerp.db,
                login=config.openerp.user,
                password=config.openerp.pw,
                )
        print('getting ir.model.data')
        ir_model_data = oe.get_model('ir.model.data')
        print('getting hr.employee')
        hr = oe.get_model('hr.employee')
        print('getting res.users')
        res_users = oe.get_model('res.users')
        print('getting res.groups')
        res_groups = oe.get_model('res.groups')
        print('retrieving users')
        users = res_users.search_read(
                domain=['|', ('active','=',True), ('active','=',False)],
                fields=['email', 'groups_id', 'id', 'login', 'image'],
                )
        user_map = dict([(u.login, u) for u in users])
        print('retrieving groups')
        groups = res_groups.search_read(
                domain=[('id','!=',0)],
                fields=['category_id', 'full_name', 'id', 'name'],
                )
        res_partner = oe.get_model('res.partner')
        partners = res_partner.search_read(
                domain=[('module','=','F74')],
                fields=['id', 'user_ids', 'xml_id'],
                )
        partner_map = dict([(p.xml_id, p) for p in partners])


@Command(
        force=('force creation of new files', FLAG),
        users=('only include these users', MULTI),
        )
def create(force, users):
    "create files needed by openerp_user_update"
    force = force or force_update
    # get last archived files
    last_arch_dept = sorted(arch_dept.glob('empsWithDepts.*'), key=lambda a: a.ext)[-1]
    last_arch_user = sorted(arch_user.glob('falconUsersImport.*'), key=lambda a: a.ext)[-1]
    with dbf.Table(config.users.emp_table, default_data_types={'C':dbf.Char}) as employees:
        login_index = employees.create_index(lambda rec: rec.login)
        # check that all users in the dbf file are present in OpenERP
        for employee in employees:
            if employee.login not in user_map:
                print('%s is missing from OpenERP' % employee.login)
                force = True
    dept_changed = not fce(config.users.raw_dept, last_arch_dept)
    user_changed = not fce(config.users.raw_user, last_arch_user)
    if (
            not force
            and not dept_changed
            and not user_changed
            ):
        print('nothing new, exiting')
        raise SystemExit
    with employees:
        emp_num_index = employees.create_index(lambda rec: rec.emp_num)
        record = employees.create_template()
        with open(config.users.raw_user) as user:
            for line in user:
                line = line.strip().split()
                record.login = line[0]
                record.password = line[1]
                record.active = line[2] == 'true'
                record.emp_num = int(line[3])
                record.name = NameCase(' '.join(line[4:]).strip('"'))
                record.email = record.login + '@sunridgefarms.com'
                if record.emp_num:
                    # active employee
                    if record in emp_num_index:
                        [old_record] = emp_num_index[record]
                        record.old_login = old_record.login
                        dbf.gather(old_record, record)
                    else:
                        record.old_login = record.login
                        employees.append(record)
                elif record in login_index:
                    # inactive employee
                    temp = login_index[record]
                    for old_record in temp:
                        if old_record.active:
                            print(
                                    'deactivating %s  (%s)' % (old_record.name, old_record.emp_num),
                                    file=stderr,
                                    )
                        record.emp_num = old_record.emp_num
                        record.name = old_record.name
                        record.old_login = old_record.login
                        dbf.gather(old_record, record)
        with open(config.users.raw_dept) as dept:
            for line in dept:
                emp_num, departments, _ = line.split(',', 2)
                emp_num = int(emp_num)
                [old_record] = emp_num_index[(emp_num,)]
                record = dbf.create_template(old_record)
                if departments == 'Marketing':
                    record.groups = 'sales_project'
                elif departments.startswith('Manuf'):
                    record.groups = 'project'
                else:
                    record.groups = 'project'   # 'none' -- allow all into 'project' for now
                dbf.gather(old_record, record)
        # TODO: handle case where emp_num is not found
        with open(config.users.updates, 'w') as updates:
            for record in emp_num_index:
                if users and record.login.strip() not in users:
                    continue
                print('adding', record.name)
                updates.write('%s %s %s %s %s %s %s %s\n' %
                        (record.emp_num, record.old_login, record.login, record.password,
                         record.active, record.groups, record.email, record.name))
    # new_ext = ".%03d" % (int(last_arch_dept.ext[1:]) + 1)
    new_ext = DateTime.fromtimestamp(last_arch_user.stat().st_mtime).strftime('%Y-%m-%d+%H:%M')
    next_arch_dept = last_arch_dept.strip_ext() + new_ext
    config.users.raw_dept.copy(next_arch_dept)
    next_arch_user = last_arch_user.strip_ext() + new_ext
    config.users.raw_user.copy(next_arch_user)
    Execute(['chown', 'openerp:', next_arch_dept, next_arch_user])


@Command(
        reset=('reset creation of new files', FLAG),
        users=('only include these users', MULTI),
        ids=('only include these employee ids', MULTI),
        )
def photos(reset, users, ids):
    "add photos to both user login accounts and hr accounts"
    reset = reset or reset_photos
    # process user photos
    print('employee table:', config.users.emp_table, verbose=2)
    with dbf.Table(config.users.emp_table, default_data_types={'C':dbf.Char}) as employees:
        print('  %d records' % len(employees), verbose=2)
        for record in employees:
            try:
                user = user_map[record.login]
            except KeyError:
                print('%s is missing from OpenERP' % record.login)
                continue
            if users and record.login not in users:
                continue
            print('checking %s:' % record.login, end='', verbose=3)
            if not reset and record.image_crc == crc32(user.image):
                print('  same', verbose=3)
                continue
            try:
                print('  updating from %s' % config.users.photo_location % record.emp_num, end='', verbose=3)
                pic = urlopen(config.users.photo_location % record.emp_num).read()
                print('  success', verbose=3)
            except URLError:
                print('  failed', verbose=3)
                continue
            image = b64encode(pic)
            try:
                print('  writing to OpenERP...', end='', verbose=3)
                res_users.write(user.id, dict(image=image))
                print('  success', verbose=3)
            except Fault:
                print('  failed', verbose=3)
                continue
            # not sure what next line is supposed to do
            # user.update(res_users.read(user.id))
            dbf.write(record, image_crc=crc32(user.image))
    # process hr photos
    domain = []
    if ids:
        domain = [('xml_id','in',ids)]
    employees = get_records(hr, domain=domain, fields=['id','name', 'image_crc','xml_id'])
    no_image = set()
    for e in employees:
        pic_path = config.users.photo_location % e.xml_id
        print('checking %r\n  id: %r\n  xml_id: %r\n  path: %r' % (e.name, e.id, e.xml_id, pic_path))
        try:
            pic = urlopen(pic_path).read()
            print(' ', pic_path)
        except Exception, exc:
            print('    ', exc)
            no_image.add(pic_path)
            pic_crc = False
            image = False
        else:
            pic_crc = str(crc32(pic))
            image = b64encode(pic)
        if not e.image_crc or e.image_crc != pic_crc or reset:
            print('  updating record with %s' % (pic_crc, ))
            hr.write(e.id, dict(image=image, image_crc=pic_crc))
        print()


@Command(
        name=Spec("email address", MULTI, type=str.upper),
        emp_no=Spec("employee number", MULTI, type=int),
        login=Spec('login', MULTI, type=str.lower),
        )
def trace(name, emp_no, login):
    print('looking for:\n  name -> %s\n  emp_no -> %s\n  login -> %s' % (name, emp_no, login), verbose=1)
    if not (name or emp_no or login):
        help('one of EMAIL, EMP_NO or LOGIN must be specified')
    #
    depts = sorted(arch_dept.glob('empsWithDepts.*'), key=lambda a: a.ext)
    users = sorted(arch_user.glob('falconUsersImport.*'), key=lambda a: a.ext)
    target_names = name
    target_emp_nos = emp_no
    target_logins = login
    last_user = set()
    last_dept = set()
    found = {}
    for user, dept in date_synced_streams(users, depts):
        print('\n'.join([user, dept]), border='box', verbose=2)
        if user:
            date = user.ext[1:]
            current_user = set()
            print('user file: ', user, verbose=3)
            user_date = user.ext
            with user.open() as u:
                text = u.read().strip().split('\n')
            for line in text:
                # jgonzalezjr 566jgj7622 true 1404 "JUAN GONZALEZ, JR."
                if not line.strip():
                    continue
                try:
                    login, password, active, emp_no, name = line.split(None, 4)
                    login = login.lower()
                    name = name.upper()
                    emp_no = int(emp_no)
                except ValueError as exc:
                    error('unable to parse line: %r  [%s -- %r]' % (line, exc, line.split(None, 4)))
                    raise
                else:
                    if (
                            find(target_names, name, exact=False)
                            or find(target_emp_nos, emp_no)
                            or find(target_logins, login)
                            ):
                        current_user.add(line)
                        if line not in last_user:
                            found.setdefault(date, {}).setdefault('user', []).append(line)
                            print('%s:  %s' % (user_date[1:], line), verbose=1)
            last_user = current_user or last_user
        if dept:
            date = dept.ext[1:]
            current_dept = set()
            print('dept file: ', dept, verbose=3)
            dept_date = dept.ext
            with dept.open() as d:
                text = d.read().strip().split('\n')
            for line in text:
                if not line.strip():
                    continue
                # 1404,Bldg Maint,"JUAN GONZALEZ, JR.","b858d37cc9c3d0066a7deac7dd5a3013"
                try:
                    emp_no, group, name, _ = re.findall(r"""(\d*),([^,]*),"([^"]*)","([^"]*)"$""", line)[0]
                    name = name.upper()
                    emp_no = int(emp_no)
                except ValueError as exc:
                    error('unable to parse line: %r  [%s -- %r]' % (line, exc, re.findall(r"""(\d*),([^,]*),"([^"]*)","([^"]*)"$""", line)))
                    raise
                else:
                    if (
                            find(target_names, name, exact=False)
                            or find(target_emp_nos, emp_no)
                            ):
                        current_dept.add(line)
                        if line not in last_dept:
                            found.setdefault(date, {}).setdefault('dept', []).append(line)
                            print('%s:  %s' % (dept_date[1:], line), verbose=1)
            last_dept = current_dept or last_dept
    # print it all out
    table = [('timestamp', 'user', 'dept'), None]
    for date, groups in sorted(found.items()):
        table.append([
                date,
                '\n'.join(groups.get('user', [])),
                '\n'.join(groups.get('dept', [])),
                ])
    echo(table, border='table')



@Command(
        )
def update():
    "update OpenERP with the new user info"
    print('loading employee records')
    employees = dbf.Table(config.users.emp_table, default_data_types={'C':dbf.Char})
    monitored_groups = AttrDict(default=list)
    all_groups = dict()
    default_groups = AttrDict(
            sales='User: Own Leads Only',
            project='User',
            human_resources='Employee',
            )
    monitored = ''.join(
            [line.title() for line in open(config.users.modules) if not line[0] == '#']
            ).split()
    monitored.append('Human Resources')
    for group in module.groups:
        all_groups[group.id] = group.full_name
        if group.category_id and group.category_id[1] in monitored:
            cname = group.category_id[1].lower().replace(' ', '_')
            monitored_groups[cname].append(group.id)
            if group.name == default_groups[cname]:
                monitored_groups[cname + '_default'].append(group.id)
    data = list()
    not_found = list()
    failed = list()
    logins = set()
    errors = dict()
    print('users:', len(users))
    for line in SchroedingerFile(config.users.updates):
        if line.strip() == 'end':
            break
        line = line.split()
        line = [
                line[0],                        # employee #
                line[1],                        # old login
                line[2],                        # new login
                line[3],                        # password
                line[4] == 'True',              # active
                line[5].split('_'),             # allowed groups (or 'none')
                line[6],                        # email
                ' '.join(line[7:]).strip('"'),  # full_name
                ]
        if line[2] in logins:
            continue
        line[5].append('human_resources')
        logins.add(line[2])
        data.append(line)
    if not data:
        print('nothing to do')
        return
    for row in data:
        print('checking', row[6], '...', verbose=2, end='')
        try:
            # groups is which groups this user is allowed to be in (strings)
            # permissions is which groups the user is actually in (list of ints)
            # monitored_groups links group names with group categories
            #   - (dict of name:[int, int, ...] and name_default:[int])
            # 
            # for each name in monitored_groups
            #    if that name is not in groups
            #       remove all ints that belong to that name from permissions
            #    if that name is in groups
            #       make sure that at least one of the ints is present in permissions
            #       if not then add name_default to permissions
            #
            emp_num, old_login, login, password, active, groups, email, name = row
            user = [user for user in users if user.login == old_login][0]
        except IndexError:
            print('not found', verbose=2)
            not_found.append(row)
        else:
            print('', verbose=2)
            # monitored_groups is the groups we care about
            # groups are the groups the user can belong to that we care about
            # user is the user record
            before = set(user.groups_id)
            permissions = adjust_permissions(monitored_groups, groups, user)
            target = set(permissions)
            group_change = False
            if before != target:
                group_change = True
                print('changing group assignment for %s: ' % user.login)
                for id in (before - target):
                    print('   should lose: %3d -- %s' % (id, all_groups[id]))
                for id in (target - before):
                    print('      will add: %3d -- %s' % (id, all_groups[id]))
                permissions = list(before | set(permissions))
            email = user.email or email
            values = dict(
                        xml_id=emp_num,
                        module='F74',
                        login=login,
                        password=password,
                        active=active,
                        name=name,
                        email=email,
                        employee=True,
                        tz='America/Los_Angeles',
                        )
            try:
                res_users.write(user.id, values)
            except Exception, exc:
                if 'password' in values:
                    values['password'] = '...'
                err = 'error %s trying to update %r: %r\n' % (type(exc).__name__, values['login'], values)
                errors.setdefault((str(exc).replace('\\n','\n')), list()).append(err)
                if isinstance(exc, Fault):
                    row = row + [exc.faultCode.replace('\n\n', ':  ')]
                else:
                    row = row + [exc.message or 'unknown failure']
                failed.append(row)
                continue
            if group_change:
                res_users.write(user.id, dict(groups_id=[(6, 0, permissions)]))
                # now check to see if it took
                user = get_records(res_users, ids=user.id)
                actual = set(user.groups_id)
                if actual != target:
                    print('      * FAILED *')
                    for id in target - actual:
                        print('         not added: %3d -- %s' % (id, all_groups[id]))
                    # currently not removing any group associations;
                    # leaving in in case we do later
                    # for id in (actual & (before - target)):
                    #     print('       not removed: %3d -- %s' % (id, all_groups[id]))
                    for id in (actual - (before | target)):
                        print('        also added: %3d -- %s' % (id, all_groups[id]))
                    print()
    ir_model_data = oe.get_model('ir.model.data')
    with employees:
        emp_ndx = employees.create_index(lambda rec: rec.login)
        for row in not_found:
            try:
                # add user
                emp_num, old_login, login, password, active, groups, email, name = row
                # check to see of partner record already exists
                partner_link = partner_map.get(emp_num)
                if partner_link:
                    partner_link = partner_link.id
                try:
                    values = dict(
                            xml_id=emp_num,
                            module='F74',
                            login=login,
                            password=password,
                            active=active,
                            name=name,
                            email=email,
                            employee=True,
                            tz='America/Los_Angeles',
                            )
                    if partner_link:
                        values['partner_id'] = partner_link
                        del values['xml_id']
                        del values['module']
                    print('creating user: %s\n\twith: %s' % (login, values))
                    id = res_users.create(values)
                    print('updating ir.model.data')
                    ir_model_data.create({
                            'module':'fis',
                            'name': 'F074_%s_res_users' % emp_num,
                            'model': 'res.users',
                            'res_id': id,
                            })
                except Exception, exc:
                    error('unable to create user:\n======================')
                    error(str(exc).replace('\\n','\n'))
                    row = row + ['unable to create user']
                    failed.append(row)
                    continue
                user = get_records(res_users, ids=id)
                users.append(user)
                # adjust permissions
                before = set(user.groups_id)
                permissions = adjust_permissions(monitored_groups, groups, user)
                target = set(permissions)
                group_change = False
                if before != target:
                    group_change = True
                    print('adding group assignment for %s: ' % user.login)
                    for id in (before - target):
                        print('   losing: %3d -- %s' % (id, all_groups[id]))
                    for id in (target - before):
                        print('   adding: %3d -- %s' % (id, all_groups[id]))
                if group_change:
                    res_users.write(user.id, dict(groups_id=[(6, 0, permissions)]))
                    # now check to see if it took
                    user = get_records(res_users, ids=user.id)
                    actual = set(user.groups_id)
                    if actual != target:
                        print('      * FAILED *')
                        for id in target - actual:
                            print('         not added: %3d -- %s' % (id, all_groups[id]))
                        not_removed = actual & (before - target)
                        for id in not_removed:
                            print('       not removed: %3d -- %s' % (id, all_groups[id]))
                        added = actual - (before | target)
                        for id in added:
                            print('        also added: %3d -- %s' % (id, all_groups[id]))
                        print()
                # grab crc of current image and store in employee db
                crc = crc32(user.image) # hex mask is for Py3k compatibility
                dbf.write(emp_ndx[login][0], image_crc=crc)
            except Fault, exc:
                error(str(exc).replace('\\n','\n'))
                row = row + [exc.faultCode.replace('\n\n', ':  ')]
                failed.append(row)
            except IndexError, exc:
                error(str(exc).replace('\\n','\n'))
                row = row + [exc.message or 'index failure']
                failed.append(row)
            except TypeError, exc:
                row = row + [exc.message or 'type error']
    for tb, problems in errors.items():
        error()
        for p in problems:
            error(p, end='\n\n')
        error()
        error(tb)
        error('=' * 50)
    if failed:
        with open(config.users.failed, 'a') as csv:
            csv.write('old_login,new_login,password,active,groups,name,error\n')

            for row in failed:
                print(row)
                csv.write('%s, %s, %s, %s, %s, %r, %s, %s, %s\n' % tuple(row))

@Command(
        user=Spec('user to add/reset', force_default=None),
        reset=Spec('delete/recreate existing logins', FLAG),
        force=Spec('assume `yes` to all questions', FLAG),
        )
def update_transmitter_logins(user, reset, force):
    """
    Maintain logins for transmitter number / ship-to code pairs.
    """
    ctx = {'active_test': False}
    fis_transmitter_code = oe.get_model('fis.transmitter_code')
    base_user = ir_model_data.get_object_reference('base', 'group_user')[1]
    # fnx_sr_guest = ir_model_data.get_object_reference('fnx_sr', 'group_fnx_sr_guest')[1]
    portal_account = ir_model_data.get_object_reference('portal', 'group_portal')[1]
    contact_creation = ir_model_data.get_object_reference('base', 'group_partner_manager')[1]
    #
    # transmitter
    #
    transmitters = dict(
            (r.id, r)
            for r in get_records(fis_transmitter_code)
            )
    print('%d transmitter records found' % len(transmitters), verbose=2)
    #
    # logins
    #
    login_id_by_xml_id = dict(
            (r.login, r)
            for r in get_records(
                    res_users,
                    fields=[
                        'id', 'login', 'customer',
                        'fis_partner_id',
                        'fis_transmitter_id',
                        'fis_product_cross_ref_code',
                        'fis_online_order_show_po_number',
                        'fis_online_order_show_req_ship_date',
                        ],
                    context=ctx,
                    ))
    found_id = Var(login_id_by_xml_id.get)
    HEB = Var(lambda k: re.match('^HE\d\d\d$', k, re.I))
    print('%d logins found' % len(login_id_by_xml_id), verbose=2)
    #
    # ship-tos
    #
    partner_by_xml_id = dict(
            (r.xml_id, r)
            for r in get_records(
                    res_partner,
                    domain=['|',('fis_ship_to_parent_id','!=',False),('fis_ship_to_ids','!=',False)],
                    fields=['xml_id', 'fis_ship_to_code', 'fis_ship_to_parent_id', 'active'],
                    context=ctx,
                    )
            )
    #
    # now create any new logins, keeping track of any now attached to
    # inactive ship-tos
    #
    # master_xml_id:    main customer record
    # ship_to_code:     four letters or 'default'
    #
    inactive_logins = []
    created_logins = []
    deleted_logins = []
    updated_logins = []
    for transmitter in ViewProgress(
            sorted(transmitters.values(), key=lambda t: t.transmitter_name),
            'Sifting through $total records...',
            view_type='bar',
        ):
        master_xml_id = transmitter.partner_xml_id
        heb = HEB(master_xml_id)
        ship_to_code = transmitter.ship_to_code
        ship_to_xml_id = ('%s-%s' % (master_xml_id, ship_to_code or '')).strip('-')
        user_login = ('%s-%s' % (master_xml_id, ship_to_code or '')).strip('-')
        ship_to_partner = partner_by_xml_id.get(ship_to_xml_id)
        #
        if user:
            if user.endswith('*') and user_login.startswith(user[:-1]):
                pass
            elif user == user_login:
                pass
            else:
                continue
        elif not heb and (ship_to_partner is None or ship_to_partner.active is False):
            inactive_logins.append(user_login)
            continue
        login = {
                'login': user_login,
                'password': transmitter.transmitter_no,
                'name': transmitter.name,
                'fis_partner_id': ship_to_partner.id,
                'groups_id': [(4, portal_account), (3, base_user), (3, contact_creation)],
                'customer': True,
                }
        if heb:
            # handle HEB
            login['fis_product_cross_ref_code'] = 'HE447'
            login['fis_online_order_show_req_ship_date'] = False
            login['fis_online_order_show_po_number'] = False
        else:
            # and non-HEB active customers
            login['fis_product_cross_ref_code'] = master_xml_id
            login['fis_online_order_show_req_ship_date'] = True
            login['fis_online_order_show_po_number'] = True
        affirmative = not reset or force
        if found_id(user_login) and reset:
            affirmative = force
            if not affirmative:
                affirmative = input('delete and recreate %r?' % (user_login, ))
            if affirmative:
                print('deleting %s [%r]' % (user_login, found_id()), verbose=3)
                res_users.unlink(found_id().id)
                del login_id_by_xml_id[user_login]
        if found_id():
            # update
            old_login = found_id()
            new_values = {}
            for field in login.keys():
                if field in ('login','password','name','groups_id'):
                    continue
                if login[field] != old_login[field]:
                    new_values[field] = login[field]
            new_values['groups_id'] = login['groups_id']
            res_users.write(old_login.id, new_values)
            updated_logins.append(found_id().login)
        else:
            login['fis_partner_id'] = partner_by_xml_id[master_xml_id].id
            if len(transmitter.name) > 60:
                name = transmitter.name[:57] + '...'
            else:
                name = transmitter.name
            print('| %-15s | %-80s |' % (user_login, name), verbose=3)
            login_id_by_xml_id[user_login] = res_users.create(login)
            created_logins.append(user_login)
    print('%d logins created' % (len(created_logins), ))
    print(', '.join(created_logins), verbose=3)
    print('%d logins updated' % (len(updated_logins), ))
    print(', '.join(updated_logins), verbose=3)
    for inactive in inactive_logins:
        login = login_id_by_xml_id.get(inactive)
        if login is not None:
            deleted_logins.append((inactive, login.id))
    if deleted_logins:
        res_users.unlink([t[1] for t in deleted_logins])
        print('%d logins deleted' % (len(deleted_logins), ))
        print(', '.join([t[0] for t in deleted_logins]), verbose=3)


@Alias('dbf')
@Command(
        action=Spec('which action to perform', choices=['search','delete','update']),
        login=Spec('login to search for', ),
        exact=Spec('only show exact matches', FLAG),
        values=Spec('values to update', ),
        )
def dbf_action(action, login, exact, **values):
    with dbf.Table(config.users.emp_table, default_data_types={'C':dbf.Char}) as employees:
        login = login.lower()
        for record in employees:
            r_login = record.login.lower()
            if (exact and r_login == login) or (not exact and login in r_login):
                if action == 'search':
                    echo(record, border='lined')
                elif action == 'delete':
                    echo(record, border='!')
                    if input('delete record?'):
                        dbf.delete(record)
                elif action == 'update':
                    echo(record, border='?')
                    if input('update record?'):
                        dbf.write(record, values)
        if action == 'delete':
            employees.pack()

# helpers

def adjust_permissions(oe_groups, allowed_groups, user):
    permissions = set(user.groups_id)
    for group_name, ints in oe_groups.items():
        if group_name.endswith('_default'):
            continue
        ints = set(ints)
        if group_name in allowed_groups:
            if not ints & permissions:
                # add default if nothing already there
                permissions.add(oe_groups[group_name + '_default'][0])
        else:
            # remove all priveleges for this group
            permissions -= ints
    return list(permissions)


def find(possibles, target, exact=True):
    for p in possibles:
        if p == target or not exact and p in target:
            return True
    return False


def date_synced_streams(users, depts):
    users = iter(users)
    depts = iter(depts)
    u = next(users, None)
    u_date = u and u.ext or None
    d = next(depts, None)
    d_date = d and d.ext or None
    while True:
        if u is None:
            yield '', d
        elif d is None:
            yield u, ''
        elif u_date == d_date:
            yield u , d
        elif u_date < d_date:
            yield u, ''
        elif d_date < u_date:
            yield '', d
        else:
            raise Exception('what did I forget?\n  u: %r -- %r\n  d: %r -- %r' % (u, u_date, d, d_date))
        if u is None:
            d = next(depts, None)
        elif d is None:
            u = next(users, None)
        elif u_date == d_date:
            u = next(users, None)
            d = next(depts, None)
        elif u_date < d_date:
            u = next(users, None)
        elif d_date < u_date:
            d = next(depts, None)
        else:
            raise Exception('what did I forget?\n  u: %r -- %r\n  d: %r -- %r' % (u, u_date, d, d_date))
        u_date = u and u.ext or None
        d_date = d and d.ext or None
        if u is d is None:
            break



Run()
