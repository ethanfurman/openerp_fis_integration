#!/usr/local/sbin/suid-python --virtualenv=/opt/openerp
"""\
Update OpenERP tables from FIS source files.

Downloads selected FIS files, determine which have changed, finds the
appropriate script, and runs it.
"""

from __future__ import print_function
from scription import *
from antipathy import Path
from logging import getLogger, INFO, Formatter, handlers
import os
import updates
updates.script_verbosity = script_verbosity


# two directories are used, one for old data and one for the new incoming
# data;

# which is used is determined by the timestamp on a specifec file
# called age


@Script()
def main():
    print('getting logger', verbose=2)
    global logger, master, path, pre, old, new, active_files, config
    logger = getLogger()
    logger.setLevel(INFO)
    _handler = handlers.RotatingFileHandler(
            '/var/log/openerp/update_fis.log',
            maxBytes=1024*1024*1024,
            backupCount=30,
            )
    _formatter = Formatter('%(process)06d %(asctime)s %(name)-25s %(message)s')
    _handler.setFormatter(_formatter)
    logger.addHandler(_handler)
    config = OrmFile('%s/config/fnx.ini' % os.environ['VIRTUAL_ENV'], types={'_path':Path})
    master = config.network.fis_data_host
    path = config.network.fis_data_path
    pre = config.network.fis_data_prefix
    old = config.network.fis_data_local_old_path
    new = config.network.fis_data_local_path
    active_files = config.network.fis_openerp_files.split()

@Command(
        quick=Spec('Differential agains FIS tables (very fast)', FLAG, force_default=True),
        full=Spec('Differential against existing OpenERP data', FLAG),
        )
def update_fis(quick, full):
    """
    update FIS files from master, then FIS data in OpenERP

    copy from network.fis_data_local_path to network.fis_data_local_old_path
    copy from network.fis_data_host/path to network.fis_data_local_path
    calculate changed files
    find update scripts for those files
    run scripts
    """
    #
    # step 1: move files around
    #
    print('copying files')
    # copy files to old path
    system('rsync -a %s/ %s' % (new, old))
    # calculate which files to grab from master
    if full:
        files = '{path}/{pre}???? {path}/{pre}????? {path}/{pre}??????'.format(path=path, pre=pre).split()
    else:
        files = ['%s/%s%s' % (path, pre, f) for f in active_files]
    # and grab them
    system('rsync --bwlimit=10 %s:%s %s/' % (master, ' :'.join(files), new))
    system('chown -R openerp: /FIS')
    system('chmod 440 %s/*' % config.network.fis_data_local_path)
    #
    # step 2: determine which files changed
    #
    print('checking for changed files')
    c1 = [
        f for f in new.glob('O????') if
            f.stat().st_mtime != old.stat(f.filename).st_mtime
        ]
    c1.extend([
        f for f in new.glob('O?????') if
            f.stat().st_mtime != old.stat(f.filename).st_mtime
        ])
    c1.extend([
        f for f in new.glob('O??????') if
            f.stat().st_mtime != old.stat(f.filename).st_mtime
        ])
    print('changed files: %s [%s]' % (len(c1), ', '.join(c1)), verbose=1)
    #
    # step 3: get appropriate scripts, and execute them
    #
    FIS_mapping = updates.get_script_mapping()
    FIS_mapping



def system(cmd):
    with user_ids(0, 0):
        print('--== running "%s" . . .: ' % cmd, end='', verbose=2)
        job = Execute(cmd)
        print(job.returncode, '==--', verbose=2)
        if job.returncode or job.stderr:
            # unable to copy files -- abort
            error('Error copying files (returncode %r):' % (job.returncode, ))
            error('------------------ cmd  ------------------')
            error(cmd)
            error('----------------- stdout -----------------')
            error(job.stdout)
            error('----------------- stderr -----------------')
            error(job.stderr)
            error('==========================================')
            abort()
        else:
            print('---- stdout ----', verbose=2)
            print(job.stdout, verbose=2)
            print('=' * 25, verbose=2)

Main()
