#!/usr/local/sbin/suid-python --virtualenv
from __future__ import print_function

import os
from antipathy import Path
from openerplib import get_connection, get_records, AttrDict, Query, Many2One
from scription import *
from xmlrpclib import Fault
import re

virtual_env = os.environ['VIRTUAL_ENV']
config = '%s/config/fnx.ini' % virtual_env

TEST = [
        'xml_id',
        'hr_insurance_choice_ids/year_month',
        'hr_insurance_choice_ids/medical',
        'hr_insurance_choice_ids/dental',
        'hr_insurance_choice_ids/vision',
        'hr_insurance_choice_ids/life',
        'name_related',
        'home_country_id/name',
        'home_country_id/code',
        ]

TEST_DOMAIN = [('name_related','in',['Abraham S. Cohen','Aurelia Garcia'])]

ALL_ACTIVE = [(1,'=',1)]

SHOW_ID = False

@Script(
        hostname=('host to connect to'),
        database=('database to query'),
        show_ids=('show record ids', FLAG, None),
        )
def main(hostname, database, show_ids=False):
    global oe, SHOW_ID
    SHOW_ID = show_ids
    cfg = OrmFile(config, types={'_path':Path})
    oe = get_connection(
            hostname=hostname or cfg.openerp.host,
            database=database or cfg.openerp.db,
            login=cfg.openerp.user,
            password=cfg.openerp.pw,
            )

@Command(
    name=('name of export', REQUIRED),
    to_file=Spec('file to store results in', REQUIRED, type=Path),
    domain=Spec('domain to restrict record selection', OPTION, force_default=ALL_ACTIVE, type=eval),
    table=('name of OpenERP table (only needed if multiple saved exports with same name', OPTION),
    )
def oe_export(name, to_file, domain, table):
    found = []
    for export in get_records(oe, 'ir.exports', domain=[('name','=',name)]):
        found.append(export.resource)
        if table and export.resource == table:
            break
    else:
        # no exact match, check only one match found
        if not found:
            abort('no export found with name of %r' % (name, ))
        elif len(found) > 1:
            abort('multiple matches for %r:\npossible tables: %s'
                    % (name, ', '.join(found)))
    # at this point, export is the one we want
    table = export.resource
    fields_ids = export.export_fields
    fields = [
            f['name']
            for f in get_records(
                oe,
                'ir.exports.line',
                domain=[('id','in',fields_ids)],
                fields=['name'],
                )]
    q = Query(oe.get_model(table), domain=domain, fields=fields[:])
    #
    write_xls(export.name, q, fields, to_file)


@Command(
    table=('name of table', REQUIRED),
    fields=('fields to extract', MULTIREQ),
    to_file=Spec('file to store results in', REQUIRED, type=Path, force_default='-'),
    domain=Spec('domain to restrict record selection', OPTION, force_default=ALL_ACTIVE, type=eval),
    order=Spec('desired order of output', MULTI),
    distinct=Spec('unique rows only', FLAG, abbrev=None),
    separator=Spec('print separator between lines', FLAG),
    )
def adhoc(table, fields, to_file, domain, order, distinct, separator, _internal=False):
    print('searching %s\n  for %s\n  retreiving %s\n  ordered by %s' % (table, domain, fields, order))
    fields = list(fields)
    q = Query(oe.get_model(table), domain=domain, fields=fields[:], order=order, unique=distinct)
    if _internal and not to_file:
        return q
    #
    if to_file.endswith('.xls'):
        write_xls(table, q, fields, to_file, separator)
    elif to_file.endswith('.csv'):
        write_csv(table, q, fields, to_file, separator)
    elif to_file.endswith('.txt') or to_file == '-':
        write_txt(table, q, fields, to_file, separator)
    else:
        abort('unknown file type: %r' % to_file)
    if _internal:
        return q


@Command(
        command=('sql command', REQUIRED),
        separator=('insert blank line between records', FLAG),
        )
def sql(command, separator):
    """
    SELECT field_name [, field_name [, ...]]
        FROM table
        [WHERE ...]
        [ORDER BY field1 [ASC|DESC] [, field2 [ASC|DESC] [, ...]]]
        [TO file]

    DESCRIBE table
        [ORDER BY field1]

    UPDATE table
        SET field_name=... [, field_name=... [...]]
        [WHERE ...]

    DELETE FROM table
        [WHERE ...]
    """
    command = command.strip(' ;')
    check_command = command.lower()
    if ';' in check_command:
        abort('more than one command specified')
    if check_command.startswith('select '):
        sql_select(command, separator)
    elif check_command.startswith('count '):
        sql_count(command, separator)
    elif check_command.startswith('describe '):
        sql_describe(command, separator)
    elif check_command.startswith('update '):
        sql_update(command)
    elif check_command.startswith('delete from '):
        sql_delete(command)
    else:
        abort('one of SELECT | UPDATE | DELETE | DESCRIBE | COUNT not specified')

def sql_describe(command, separator):
    """
    DESCRIBE table
        [ORDER BY field1]
    """
    command = command.lower()
    desde = command.split()[1]
    try:
        model = oe.get_model(desde)
    except Fault, exc:
        if "doesn't exist" in exc.faultCode:
            abort('unknown table %r' % (desde, ))
        raise
    if ' order by ' in command:
        orden = command.split(' order by ')[1].strip()
        if orden not in ('field','display','type','help'):
            abort('ORDER BY must be one of field, display, type, or help [ %r ]')
        sort = {
            'field': lambda t: t[0],
            'display': lambda t: t[1]['string'],
            'type': lambda t: t[1]['type'],
            'help': lambda t: t[1]['help'],
            }[orden]
    else:
        sort = lambda t: t[0]
    seleccion = sorted(model.fields_get().items(), key=sort)
    table = [('Field','Display','Type','Help'), None]
    for field, desc in seleccion:
        table.append((field, desc['string'], desc['type'], (desc.get('help') or '').replace('\n','  ')))
    echo(table, border='table')

def sql_select(command, separator, _internal=False):
    """\
    SELECT field_name [, field_name [, ...]]
        FROM table
        [WHERE ...]
        [ORDER BY field1 [ASC|DESC] [, field2 [ASC|DESC] [, ...]]]
        [TO file]
    """
    imprimido = '-'
    orden = ''
    clausa = ''
    donde = []
    distinta = False
    command = ' '.join(command.split())
    if not re.search(' from ', command, flags=re.I):
        abort('FROM not specified')
    if command.split()[-2].lower() == 'to':
        imprimido = command.split()[-1]
        command = ' '.join(command.split()[:-2])
    #
    # get SELECT fields
    #
    seleccion, resto = re.split(' from ', command, maxsplit=1, flags=re.I)
    seleccion = [s.strip(',') for s in seleccion.split()[1:] if s != ',']
    if not seleccion:
        abort('missing fields')
    if seleccion[0].upper() == 'DISTINCT':
        distinta = True
        seleccion.pop(0)
    if not seleccion:
        abort('missing fields')
    if SHOW_ID and 'id' not in seleccion:
        seleccion.insert(0, 'id')
    print('SELECT:', seleccion)
    #
    # get FROM table
    #
    resto = resto.split()
    desde, resto = resto[0], resto[1:]
    if desde.upper() in ('', 'WHERE', 'ORDER'):
        abort('missing table')
    elif resto:
        if resto[0].upper() == 'WHERE':
            resto = resto[1:]
            if not resto or ' '.join(resto[:2]).upper() == 'ORDER BY':
                abort('missing WHERE clause')
            resto = ' '.join(resto)
            if re.search(' ORDER BY ', resto, flags=re.I):
                clausa, orden = re.split(' ORDER BY ', resto, maxsplit=1, flags=re.I)
            else:
                clausa = resto
            clausa = clausa.strip()
            orden = orden.strip()
            resto = []
        if ' '.join(resto[:2]).upper() == 'ORDER BY':
            orden = ' '.join(resto[2:])
            resto = []
        if resto:
            abort('malformed query')
    # get field names if * specified
    if seleccion == ['*']:
        seleccion = ['id'] + sorted(oe.get_model(desde).fields_get().keys())
        print('SELECT:', seleccion)
    print('FROM', desde)
    #
    # and get WHERE clause
    #
    donde = convert_where(clausa)
    if _internal:
        imprimido = ''
    print('WHERE', donde)
    print('ORDER BY', orden)
    print('TO', imprimido)
    #
    # at this point we have the fields, the table, and possibly
    # the output file -- hand off to adhoc()
    #
    query = adhoc(
            desde,
            seleccion,
            imprimido,
            donde or ALL_ACTIVE,
            orden,
            distinta,
            separator,
            _internal=True,
            )
    if _internal:
        return query
    echo('SELECT %d' % len(query.records))

def sql_update(command):
    """\
    UPDATE table
        SET field_name=... [, field_name=... [...]]
        [WHERE ...]
    """
    pieces = command.split()
    if len(pieces) < 2:
        abort('table not specified')
    table = pieces[1]
    try:
        table = oe.get_model(table)
    except Fault, exc:
        if "doesn't exist" in exc.faultCode:
            abort('unknown table %r' % (table, ))
        raise
    if len(pieces) < 3 or pieces[2].lower() != 'set':
        abort('malformed command -- missing SET keyword')
    command = ' '.join(pieces[3:])
    try:
        where_index = command.lower().index(' where ')
        where_clause = command[where_index+7:]
        set_clause = command[:where_index]
    except ValueError:
        if command.lower().endswith(' where'):
            abort('malformed command -- missing WHERE parameters')
        where_clause = []
        set_clause = command
    print('where clause: %r' % (where_clause, ))
    values = convert_set(set_clause)
    if not values:
        abort('malformed command -- no changes specified')
    domain = convert_where(where_clause)
    #
    # have all the info, make the changes
    #
    print('domain: %r' % (domain, ))
    ids = table.search(domain)
    print('writing\n  %r\nto %s for ids\n%r' % (values, table._name, ids))
    table.write(ids, values)
    echo('UPDATE %d' % len(ids))

def sql_delete(command):
    """\
    DELETE FROM table
        [WHERE ...]
    """
    pieces = command.split()
    if len(pieces) < 3:
        abort('table not specified')
    table = pieces[2]
    try:
        table = oe.get_model(table)
    except Fault, exc:
        if "doesn't exist" in exc.faultCode:
            abort('unknown table %r' % (table, ))
        raise
    if len(pieces) > 3 and pieces[3].lower() != 'where':
        abort('malformed command -- missing WHERE keyword')
    where_clause = ' '.join(pieces[4:])
    domain = convert_where(where_clause)
    #
    # have all the info, make the changes
    #
    print('domain: %r' % (domain, ))
    ids = table.search(domain)
    if not ids:
        echo('no records found matching %r' % (where_clause, ))
    print('deleting %d records from %s' % (len(ids), table._name))
    table.unlink(ids)
    echo('DELETE %d' % len(ids))

def sql_count(command, separator):
    """
    COUNT field_name [, field_name [, ...]]
        FROM table
        [WHERE ...]
        [ORDER BY field1 [ASC|DESC] [, field2 [ASC|DESC] [, ...]]]
        [TO file] # ignored
    """
    query = sql_select(command, separator, _internal=True)
    echo('COUNT %d' % len(query.records))

@Command(
        table=("show exports for TABLE", )
        )
@Alias('list')
def list_exports(table=None):
    for export in get_records(oe, 'ir.exports'):
        if table and export.resource != table:
            continue
        echo('%-60s [%s]' % (export.name, export.resource))

# helpers

def convert_set(clausa):
    values = {}
    while clausa:
        # e.g. login = 'ethan'
        #      id=201
        #      blah = null, this = 'that'
        print('set', clausa, verbose=2)
        try:
            field, op, value, clausa = re.match(
                    "^(\w+)\s*(=)\s*('?.*(?<!\\')?|.*?)\s*(.*?)\s*$",
                    clausa,
                    ).groups()
            print('\nfield: %r\nop: %r\nvalue: %r\nwhere: %r\n' % (field, op, value, clausa), verbose=2)
            if not (field and op and value):
                raise ValueError
        except (ValueError, AttributeError):
            abort('malformed SET clause')
        else:
            lval = value.lower()
            if (
                    value[0] == value[-1] == '"'
                 or value[0] == value[-1] == "'"
                 ):
                value = eval(value)
            elif lval in ('t', 'true'):
                value = True
            elif lval in ('f', 'false'):
                value = False
            elif lval == 'none':
                value = False
            elif lval == 'null':
                value = False
            else:
                try:
                    oval = value
                    value = eval(value)
                except Exception:
                    pass
                if not isinstance(value, (int, long, float)):
                    abort('cannot use/convert data: %r' % (oval, ))
            values[field] = value
            if clausa.startswith(','):
                clausa = clausa[1:].lstrip()
    return values

def convert_where(clausa):
    donde = []
    while clausa:
        # e.g. WHERE login = 'ethan'
        #      WHERE id=201
        #      WHERE blah is not null AND this = 'that'
        print('clausa', clausa, verbose=2)
        try:
            field, op, condition, clausa = re.match(
                    r"^(\w+)\s*(is not|is|like|=like|not like|ilike|=ilike|not ilike|=|<|>|<=|>=|!=)\s*('(?:[^'\\]|\\.)*?'|\S*)\s*(.*?)\s*$",
                    clausa,
                    flags=re.I
                    ).groups()
            print('\nfield: %r\nop: %r\ncond: %r\nwhere: %r\n' % (field, op, condition, clausa), verbose=2)
            if not (field and op and condition):
                raise ValueError
        except (ValueError, AttributeError):
            abort('malformed WHERE clause')
        else:
            lop = op.lower()
            lcond = condition.lower()
            if (
                    condition[0] == condition[-1] == '"'
                 or condition[0] == condition[-1] == "'"
                 ):
                condition = condition[1:-1]
            elif lcond in ('t', 'true'):
                condition = True
            elif lcond in ('f', 'false'):
                condition = False
            elif lcond == 'none':
                condition = None
            elif lcond == 'null':
                pass
            else:
                try:
                    condition = int(condition)
                except ValueError:
                    try:
                        condition = float(condition)
                    except ValueError:
                        abort('unknown data type: %r %r' % (type(condition), condition))
            if condition is not False and condition == 0:
                condition = 0.0
            elif (lop, lcond) == ('is', 'null'):
                op, condition = '=', False
            elif (lop, lcond) == ('is not', 'null'):
                op, condition = '!=', False
            donde.append((field,op,condition))
            if clausa.lower().startswith('or '):
                donde.insert(0, '|')
                clausa = clausa[3:]
            elif clausa.lower().startswith('and '):
                donde.insert(0, '&')
                clausa = clausa[4:]
    return donde

def write_xls(sheet_name, query, fields, file, separator=False):
    import xlwt
    workbook = xlwt.Workbook()
    worksheet = workbook.add_sheet(sheet_name)
    #
    for i, field_name in enumerate(fields):
        worksheet.write(0, i, query.names[field_name] or field_name.upper())
        worksheet.col(i).width = 8000 # around 220 pixels
        # TODO: calculate width base on column contents
    #
    i = 0
    for r in query.records:
        print(r, verbose=2)
        if separator:
            i += 1
        er = ExpandedRow(fields, r)
        for row in er:
            i += 1
            ci_bump = 0
            for cell_index, cell_value in enumerate(row):
                if isinstance(cell_value, Many2One):
                    cell_value = str(cell_value)
                    # print('skipping m2o', cell_value, verbose=3)
                elif isinstance(cell_value, (list, tuple)):
                    print('cell_value ->', cell_value, verbose=3)
                    for cv in cell_value:
                        if isinstance(cv, Many2One):
                            worksheet.write(i, cell_index+ci_bump, cv)
                        elif cv:
                            cv = re.sub("\r", " ", cv)
                            cv = re.sub('"', '\"', cv)
                            cv = '%s' % cv
                            worksheet.write(i, cell_index+ci_bump, cv)
                        else:
                            worksheet.write(i, cell_index+ci_bump, '')
                        ci_bump += 1
                    continue
                elif isinstance(cell_value, basestring):
                    cell_value = re.sub("\r", " ", cell_value)
                    cell_value = re.sub('"', '\"', cell_value)
                    cell_value = '%s' % cell_value
                elif cell_value in (False, None):
                    cell_value = ''
                elif cell_value is True:
                    cell_value = 'True'
                worksheet.write(i, cell_index, cell_value)
    workbook.save(file)

def write_csv(table, query, fields, file, separator):
    lines = []
    line = []
    print('field count:', len(fields), fields, verbose=2)
    for field_name in fields:
        line.append(field_name)
    print(repr(line), verbose=3)
    lines.append(','.join(line))
    #
    for r in query.records:
        if separator:
            lines.append('')
        er = ExpandedRow(fields, r)
        for row in er:
            line = []
            for cell_value in row:
                if isinstance(cell_value, Many2One):
                    cell_value = str(cell_value)
                    # print('skipping m2o', cell_value, verbose=3)
                elif isinstance(cell_value, (list, tuple)):
                    print('cell_value ->', cell_value, verbose=3)
                    for cv in cell_value:
                        if cv:
                            if isinstance(cv, basestring):
                                cv = re.sub("\r", " ", cv)
                                cv = re.sub('"', '\"', cv)
                                cv = '"%s"' % cv
                                line.append(cv)
                            elif isinstance(cv, bool):
                                line.append(str(int(cv)))
                            elif cv is None:
                                line.append('')
                            else:
                                line.append(str(cv))
                        else:
                            line.append('')
                    continue
                elif isinstance(cell_value, basestring):
                    cell_value = re.sub("\r", " ", cell_value)
                    cell_value = re.sub('"', '\"', cell_value)
                    cell_value = '"%s"' % cell_value
                elif isinstance(cell_value, bool):
                    cell_value = int(cell_value)
                elif cell_value is None:
                    cell_value = ''
                line.append(str(cell_value))
            lines.append(','.join(line))
    print('\n'.join([repr(l) for l in lines]), verbose=3)
    with open(file, 'w') as output:
        output.write('\n'.join(lines).encode('utf8'))

def write_txt(table, query, fields, file, separator):
    lines = []
    line = []
    print('field count:', len(fields), fields, verbose=2)
    for field_name in fields:
        line.append(field_name)
    lines.append(line)
    #
    for r in query.records:
        if separator:
            lines.append(None)
        er = ExpandedRow(fields, r)
        for row in er:
            print('post pre-process row ->', row, verbose=2)
            line = []
            for cell_index, cell_value in enumerate(row):
                if isinstance(cell_value, Many2One):
                    # cell_value = cell_value[1]
                    if SHOW_ID:
                        line.append('[%6s] %s' % cell_value)
                    else:
                        line.append(cell_value.essence())
                    # print('skipping m2o', cell_value, verbose=3)
                elif isinstance(cell_value, (list, tuple)):
                    for cv in cell_value:
                        if isinstance(cv, Many2One):
                            if SHOW_ID:
                                line.append('[%6s] %s' % cv)
                            else:
                                line.append(cv.essence())
                        elif isinstance(cv, basestring):
                            cv = re.sub("\r", " ", cv)
                            cv = re.sub('"', '\"', cv)
                            cv = '%s' % cv
                            line.append(cv)
                        elif isinstance(cv, bool):
                            line.append(' t'[cv])
                        elif cv is None:
                            line.append('')
                        else:
                            line.append(cv)
                elif isinstance(cell_value, basestring):
                    cell_value = re.sub("\r", " ", cell_value)
                    cell_value = re.sub('"', '\"', cell_value)
                    cell_value = '%s' % cell_value
                    line.append(cell_value)
                elif isinstance(cell_value, bool):
                    line.append(' t'[cell_value])
                elif cell_value is None:
                    line.append('')
                else:
                    line.append(cell_value)
            print('post post-process line ->', line, verbose=2)
            lines.append(line)
    if not separator:
        lines.insert(1, None)
    if file == '-':
        echo(lines, border='table')
    else:
        with open(file, 'w') as out:
            echo(lines, border='table', file=out)


class counter(object):

    def __init__(self, start=0):
        self.value = start

    def __iter__(self):
        return self

    def __next__(self):
        current = self.value
        self.value += 1
        return current

    next = __next__

class ExpandedRow(object):
    "converts an ordered dict into an ordered list of lists"

    def __init__(self, fields, record):
        # fields = [
        #   'xml_id',
        #   'hr_insurance_choice_ids/year_month',
        #   'hr_insurance_choice_ids/medical',
        #   'hr_insurance_choice_ids/dental',
        #   'hr_insurance_choice_ids/vision',
        #   'hr_insurance_choice_ids/life',
        #   'name_related',
        #   'home_country_id/name',
        #   'home_country_id/code',
        #   ]
        #
        # record = {
        #   'id': 8274
        #   'xml_id': 1374,
        # 	'hr_insurance_choice_ids': [
        #           {
        #            'id': 810,
        #            'year_month': '2018-07',
        #            'medical':'children',
        #            'dental':'children',
        #            'vision':'children',
        #            'life':'self',
        #           },
        #           {
        #            'id': 81820,
        #            'year_month': '2018-06',
        #            'medical':'children',
        #            'dental':'children',
        #            'vision':'children',
        #            'life':'self',
        #           }],
        #   'name_related': 'Vishan Vishal Dimri',
        #   'home_country_id': {'id':235, 'name':'United States', 'code':'US'},
        print('ExpandedRow.__init__: fields ->', fields, verbose=3)
        rows = []
        row = []
        cache = {}
        for k, v in record.items():
            print('checking %s -> %r' % (k, v), verbose=3)
            cache[k] = set()
            if k in fields:
                print('  adding element ->', k, verbose=3)
                row.append(v)
            elif any([f.startswith(k+'/') for f in fields]):
                sub_fields = [f.split('/',1)[1] for f in fields if f.startswith(k+'/')]
                if v:
                    # many2one = dict
                    # x2many = list
                    if isinstance(v, (list, tuple)):
                        sub_row = []
                        for er in [ExpandedRow(sub_fields, w) for w in v]:
                            for sr in er:
                                sub_row.append(tuple(sr))
                    elif isinstance(v, AttrDict):
                        if v:
                            sub_row = [[v[f] for f in sub_fields]]
                        else:
                            sub_row = [[None] * len(sub_fields)]
                    else:
                        raise TypeError('invalid type: %r [%r]' % (type(v), v))
                else:
                    sub_row = [[None] * len(sub_fields)]
                print('adding subrow', sub_row, verbose=3)
                row.append(sub_row)
            print('intermediate row ->', row, verbose=3)
        print('final row ->', row, verbose=3)
        for i in counter():
            line = []
            remaining = False
            for item in row:
                if not isinstance(item, list):
                    if i:
                        # not first line
                        line.append(None)
                    else:
                        # first line
                        line.append(item)
                else:
                    if len(item) > i:
                        line.extend([item[i]])
                        remaining = True
                    else:
                        if item:
                            line.extend([None] * len(item))
                        else:
                            line.extend([None])
            print('processed row ->', line, verbose=2)
            rows.append(line)
            if not remaining:
                break
        if rows:
            last_row = rows[-1]
            if all([c is None for c in last_row]):
                rows.pop()
        self.rows = rows

    def __iter__(self):
        return iter(self.rows)

    def __len__(self):
        return len(self.rows)

    def __repr__(self):
        return repr(self.rows)


# run it
Main()
